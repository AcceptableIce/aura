<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">

    <aura:set attribute="title" value="Registry Providers"/>



    <p>Registry Providers advertise registries as being available for use by the Aura Runtime.
    When you want to introduce a new implementation of a Definition type into the system, you will
    need to advertise the Registry/Factory pair for your new implemenation using a Registry Provider.
    In some cases, you'll want to use an existing Registry Provider for this, and in other cases
    you will want to add it to an existing Registry Provider.  Read on for the decision making process.</p>

    <h2>&quot;I want to add a new language for authoring Controllers&quot;</h2>

    <p>Languages in Aura are each mapped to a prefix on DefDescriptors. For example: <code>java://foo.Bar</code> vs. <code>apex://foo.Bar</code></p>.
    If you wanted to add the ability to use <code>ruby://foo.Bar</code> for specifying, ControllerDefs,
    first you will need to create a DefFactory that knows how to construct the appropriate implementations of
    ControllerDefinitions (see the DefFactories topic).  Since something like Ruby will probably be an Aura plugin
    that may or may not be available within a particular runtime, we probably want to create a new Registry Provider
    for this purpose.  The existance/non-existance of that Registry Provider in your classpath will dictate whether RubyComponentDefs
    work on the current runtime.

    <h2>&quot;I want to add support for another type of Definition for a language that we already support&quot;</h2>

    <p>If the prefix that you are adding features to already exists, you should use the Registry Provider already used for Definitions
    within that prefix.</p>

    <h2>Creating a Registry Provider</h2>

    <p>
        <p>-Create a new implemenation of AuraRegistryProvider
            <p>Optionally extend AuraRegistryProviderImpl</p>
        </p>
        <p>-Use Spring to advertise your implemenation
        <p>
            In the same module where your Factory implementation is, add a class in the <code>configuration</code> package (if one doesn't already exist),
            that has the format:
                <auradocs:codeblock>
                    @Configuration
                    public class AuraImplRubyConfig {

                        @Bean
                        public AuraRegistryProvider auraRubyRegistryProvider(){
                            return new AuraRegistryProviderRubyImpl();
                        }
                    }
                </auradocs:codeblock>
            </p>
        </p>
    </p>

    <auradocs:error>Note that the method on your configuration class must have a unique name for Spring to use it properly, so try to
        use your module name as part of your method name.</auradocs:error>

</aura:component>
