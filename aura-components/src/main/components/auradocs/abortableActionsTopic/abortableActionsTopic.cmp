<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">

  <aura:set attribute="title" value="Abortable Actions"/>
    
    <p>If a user clicks the same button multiple times or clicks multiple buttons in quick succession, it can cause strange display effects as the multiple responses return from the server.
    You can avoid this by marking a server-side action as abortable by using the <code>setAbortable()</code> method on the <code>Action</code> object in JavaScript. For example:</p>

<auradocs:codeblock>
    var a = component.get("c.serverEcho");
    a.setAbortable();
    a.setParams({ firstName : component.get("v.firstName") });
</auradocs:codeblock>

    <p>Let's dig into action processing to understand more. We also refer to server-side action calls as action instances.
    The framework batches actions into a message before sending it to the server. A message is essentially a wrapper around a list of action instances.</p>

    <p>Event processing can generate a tree of events if an event handler fires more events.
    The framework processes the event tree and every action that needs to be executed on the server is added to a queue.
    When the tree of events and all the handlers (client-side actions) are processed, the queue is flushed.
    
    If there is an abortable action in a set of actions to be performed during a transaction, then all of the other abortable actions that were queued up but not executed are aborted and their state is set to aborted.
    You can check to see if an action was aborted by checking the state. The only callback executed when the server returns a response is the callback for the abortable action that was executed.
    If none of the actions are abortable, all callbacks will be executed.</p>

    <p><b>See also:</b><br/>    
       <auradocs:topicLink topic="serverSideControllers">Server-Side Controllers</auradocs:topicLink><br/>
    </p>
    
</aura:component>
