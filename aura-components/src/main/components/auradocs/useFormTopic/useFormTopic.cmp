<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">
    <aura:set attribute="title" value="Getting User Input" />
    <p>Aura provides out-of-the-box input components that enable you to easily retrieve and process user input with built-in features such as value binding and event handling. 
    These components provide a consistent experience across mobile and desktop devices, taking advantage of HTML5 functionalities and providing a fallback experience for older browsers.
    For an example on error handling on an input component, see <auradocs:topicLink topic="error">Error Handling</auradocs:topicLink>.
    </p>

    <h3><code>ui:input</code></h3>
    <p> <code>ui:input</code> is an extensible component that gets user input for processing. Child components that extends <code>ui:input</code>, such as <code>ui:inputText</code> and <code>ui:inputNumber</code>, inherit its attributes and events.</p>
    <auradocs:info>See the <auradocs:defLink descriptor ="ui:input">ui:input</auradocs:defLink> component reference.</auradocs:info>

	<p>The demo below shows commonly used components that extend <code>ui:input</code>.
	For example, the <code>ui:inputText</code> demo calls a client-side controller action to return the input value in a <code>ui:outputText</code> component.
	The demo also identifies the keycode value of the pressed key or mouse button.</p>
	
	<p>To see how we can bind an attribute value to a component, see the <code>ui:inputDate</code> demo below. We set the attribute by using <code>&lt;aura:attribute name="myDate" type="Date" default="2013-02-28"&gt;</code> and bind it to the <code>ui:inputDate</code> component by
	setting <code>value="<aura:text value="{!"/>v.myDate}"</code>. You can also include a date picker with <code>ui:inputDate</code> and <code>ui:inputDateTime</code> by setting <code>displayDatePicker="true"</code>.</p>
    <auradocs:example descriptor="auradocs:demoForm" />
    <p>You can extend these input and output components easily to take advantage of built-in attributes and events. For example, you can update the component's value binding using the <code>updateOn</code> attribute. 
    In the demo, we set <code>updateOn="keyup"</code> to handle the <code>keyup</code> event and provide the keycode value as its parameter. The <code>mousedown</code> attribute captures button clicks using <code>event.getParam("button")</code>. If you're handling a DOM event, use <code>event.button</code> instead.
    </p>
    <p>We recommend using labels with your input components. See <auradocs:topicLink topic="label">Using Labels</auradocs:topicLink> for more information.</p>
    <auradocs:info>See the list of attributes and events for <code>ui:input</code> in the <auradocs:defLink descriptor ="ui:input">ui:input</auradocs:defLink> component reference.</auradocs:info>
   
   <h3>Autocomplete</h3>
   <p>To provide users with a list of suggested values as they type, use the <code>ui:autocomplete</code> component. The <code>ui:inputTextForAutocomplete</code> and <code>ui:inputTextAreaForAutocomplete</code> components support the <code>ui:autocomplete</code> component. </p>
   <auradocs:info>See the <auradocs:defLink descriptor="ui:autocomplete" defType="component">ui:autocompleteList</auradocs:defLink> component reference.</auradocs:info>
   
    <h3>Getting Selections from a List</h3>
     <p>Use <code>ui:inputSelect</code> to create a list of options, which is a wrapper for an HTML <code>select</code> element. You can allow multiple selections by setting the <code>multiple</code> attribute to true.
    Group options using <code>ui:inputSelectOptionGroup</code>. Each option is represented by <code>ui:inputSelectOption</code>.
    Alternatively, display a list of options from a model by using the format <code>&lt;ui:inputSelect options="<aura:text value="{!"/>m.selectOptions}" /&gt;</code> and creating the list of options in the model using <code>ArrayList&lt;InputOption&gt;</code>.
    <auradocs:info>See the <auradocs:defLink descriptor="ui:inputSelect">ui:inputSelect</auradocs:defLink> component reference.</auradocs:info>
    </p>
    <auradocs:example descriptor="auradocs:demoSelect" />
    
    <h3>Localization</h3>
    <p>Aura provides client-side localization support on components such as <code>ui:outputDate</code> and <code>ui:outputDateTime</code>.
    The components retrieve the browser's locale information and display the date and time accordingly. The following demo shows how you can override the default <code>langLocale</code> and <code>timezone</code> attributes. The output displays the time in the format <code>hh:mm</code> by default.</p>
    <auradocs:example descriptor="auradocs:demoLangLocale" />
    <p>Additionally, you can use the global value provider, <code>$Locale</code>, to obtain a browser's locale information. By default, Aura uses the browser's locale, but it can be configured to use others through the global value provider.
    See <auradocs:topicLink topic="globalValueProviders">Global Value Providers</auradocs:topicLink> for more information.</p>
    
   <p>
    <b>See Also:</b><br/>
    <auradocs:topicLink topic="oodInheritedAttributes">Inherited Component Attributes</auradocs:topicLink><br/>
    <auradocs:topicLink topic="helloAttributes">Component Attributes</auradocs:topicLink><br/>
    <auradocs:topicLink topic="helloActions">Client-Side Controllers</auradocs:topicLink><br/>
    <auradocs:topicLink topic="valueObjects">Value Objects</auradocs:topicLink>
    </p>
 </aura:component>