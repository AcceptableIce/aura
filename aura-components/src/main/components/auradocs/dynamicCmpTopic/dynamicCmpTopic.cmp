<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">
    <aura:set attribute="title" value="Dynamically Creating Components"/>

    <h2>Goal</h2>
    <p>You want to create a component dynamically from your client-side controller action or helper. </p>
   
    <h2>Code</h2>
    <p>This sample code adds a component to a <code>div</code> element. The new component is created in a server-side action and returned to the client as part of the callback.
    If you are creating components with server-side dependencies, create your components on the server and instantiate it on the client. This restriction also applies to components that contain other components with any server-side dependencies.</p>
    <auradocs:codeblock>
    var action = cmp.get("c.doSomething");
    action.setParams({
      //Set action parameters
    });

    action.setCallback(cmp, function(action) {
    
    //Create a new child component  
      var child = $A.componentService.newComponent(action.getReturnValue());
        
      var div = cmp.find("div");
      var body = div.getValue("v.body");

    //Destroy existing components and replace it with the new component
      body.destroy();
      body.setValue(child);
    })
    </auradocs:codeblock>
	<p>The <code>newComponent()</code> method enables you to create components on the server or on the client.
    <code>action.getReturnValue()</code> returns a component with its definition and attributes from a server-side controller.
    Since <code>body</code> is an <code>ArrayValue</code>, you can also insert new components using <code>push()</code>. 
    </p>
    <auradocs:info>If the component you are dynamically creating requires a server call such as to a model or provider, <code>newComponent()</code> returns an <code>aura:placeholder</code> component.
    The server then returns the component to the client and replaces the placeholder.</auradocs:info>
	
    <p>The next sample code sets the configuration attributes for the new component and creates the new component on the client.
    The configuration attributes are set on the client and Aura doesn't make a call to the server if you provide them.</p>
    <auradocs:codeblock>
   var msgConfig = {
         componentDef: {
               descriptor: "markup://namespace:name"
         },
         attributes: {
               values: {
                    severity: 'info',
                    strength: 1,
                    }
          }
    },

    var message = $A.componentService.newComponent(msgConfig);
    </auradocs:codeblock>
         
    <p>The next sample code sets the <code>localId</code> of the new component, which corresponds to its <code>aura:id</code> attribute on the component.</p> 
    <auradocs:codeblock>
    var newCmpConfig = action.getReturnValue();
    newCmpConfig["localId"] = "newId";
    var newCmp = $A.componentService.newComponent(newCmpConfig, parentCmp);    
    </auradocs:codeblock>
	
	<p>In the last sample, the <code>localId</code> is set on the component after it is created and returned from the server using <code>action.getReturnValue()</code>. 
    Additionally, <code>newComponent()</code> can take in an optional argument for the value provider. The value provider, 
    <code>parentCmp</code>, refers to the container or parent component that you want to be able to reference the new component.</p>
      
   
    <h4>Adding Event Handlers</h4>
    <p>To add an event handler to the new component, use <code>component.addHandler()</code> in your client-side controller. See <auradocs:topicLink topic="dynamicHandler">Dynamically Adding Event Handlers</auradocs:topicLink> for more information.
    </p>
    
    <h4>Destroying Components</h4>
    <p>Destroy components when you don't need them again to clean up memory. In the demo, <code>body.destroy()</code> removes all components in the <code>body</code> element, unrenders and removes them from the DOM. It also removes all event handlers on the components.</p>
    <p>When destroying components, destroy only components that you don't need. For example, don't destroy a component if you still have a dependency on its model.
    Additionally, we don't recommend destroying components in cases where it may result in orphaned components. For example, if you create a component on the server that is comprised of several sub-components, you may run into issues if you keep a subset of the child components and destroy others. 
    If the components depend on the local ID of one of the destroyed components, you are likely to get an error. Destroy the remaining components when are finish using them to avoid memory leaks.</p>

    <auradocs:info><code>newLocalComponent()</code> is deprecated and has been replaced by <code>newComponent()</code>. See the <a href="#reference?topic=api:AuraComponentService">JavaScript API reference</a> for a full list of methods.</auradocs:info>
	  
    <p><b>See also:</b><br/>
      <auradocs:topicLink topic="helloActions">Client-Side Controllers</auradocs:topicLink><br/>
      <auradocs:topicLink topic="serverSideControllers">Server-Side Controllers</auradocs:topicLink><br/>
      <auradocs:topicLink topic="valueObjects">Value Objects</auradocs:topicLink>
      </p>
    </aura:component>