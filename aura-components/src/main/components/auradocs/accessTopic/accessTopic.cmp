<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">
    <aura:set attribute="title" value="Accessibility Considerations" />
    <p>Accessible software and assistive technology enable users with disabilities to use and interact with the products you build. 
    We recommend that you follow the <ui:outputURL label="WCAG Guidelines" value="http://www.w3.org/TR/WCAG/" target="_blank" /> for accessibility when developing with Aura. 

This guide explains the accessibility features of Aura components in the <code>ui</code> namespace. We recommend that you use them and take advantage of their accessibility features.
    </p>
    
    <h3>Buttons</h3>
    <p>Buttons are sometimes designed to appear with just an image, without any text. To create an accessible button, use <code>ui:button</code> and set a textual label using the <code>label</code> attribute. 
    To hide the label from view, set <code>labelDisplay="false"</code>. The text is available to assistive technologies, but not be visible on screen.</p>
	<ui:button label="Search" iconImgSrc="/auraFW/resources/aura/images/search.png"/>
	<auradocs:codeblock>&lt;ui:button label="Search" iconImgSrc="/auraFW/resources/aura/images/search.png"/&gt;</auradocs:codeblock>
	<ui:button label="Search" iconImgSrc="/auraFW/resources/aura/images/search.png" labelDisplay="false"/>
	<auradocs:codeblock>&lt;ui:button label="Search" iconImgSrc="/auraFW/resources/aura/images/search.png" labelDisplay="false"/&gt;</auradocs:codeblock>
	
	<h3>Carousels</h3>
	<p>The <code>ui:carousel</code> component displays a list of items horizontally where users can swipe through the list or click through the page indicators.
       Note that the carousel will not be accessible if <code>visible="false"</code> on the <code>ui:carouselPageIndicatorItem</code> as this setting hides the page indicators from view. 
       Similarly, setting <code>continuousFlow="true"</code> on <code>ui:carousel</code> hides the page indicators from view.
       See <auradocs:topicLink topic="carousel">Carousel</auradocs:topicLink> for more information.
	</p>
	
	<h3>Forms, Fields, and Labels</h3>
	<p>Aura's input components are designed to make it easy to assign labels to form fields. Labels build a programmatic relationship between a form field and its textual label. 
	You can assign a label in two ways. Use the <code>label</code> attribute on a component that extends <code>ui:input</code> or use the <code>ui:label</code> component and bind it to the corresponding input component.
    When using a placeholder in an input component, set the <code>label</code> attribute for accessibility.
    </p>
    <p>Use the input components that extend <code>ui:input</code>, except when <code>type="file"</code>. For example, use <code>ui:inputTextarea</code> in preference to the <code>&lt;textarea&gt;</code> tag for multi-line text input or the <code>ui:inputSelect</code> component in preference to the <code>&lt;select&gt;</code> tag.
	</p>
	
    <ui:inputText label="Search" labelPosition="hidden" placeholder="Search" />
<auradocs:codeblock>
&lt;ui:inputText label="Search" labelPosition="hidden" placeholder="Search" /&gt;
</auradocs:codeblock>
	<p>
    Designs often include form elements with placeholder text, but no visible label. A label is required for accessibility and can be hidden visually.
    Set <code>labelDisplay="false"</code> to hide it from view but make the component accessible.
<auradocs:codeblock>
&lt;ui:label labelDisplay="false" for="myInput" label="My Input Text" /&gt;
&lt;ui:inputText aura:id="myInput" value="Put your input here." />
</auradocs:codeblock>
       See <ui:outputURL value="/auradocs#demos?demo=input" label="ui:input"/> and <auradocs:topicLink topic="label">Label</auradocs:topicLink> for more information.
    </p>
	
	<h3>Help and Error Messages</h3>
	<p>Use the <code>ariaDescribedby</code> attribute to associate the help text or error message with a particular field.</p>
	<p> 
	<ui:inputText label="Contact Name" labelPosition="top" ariaDescribedby="contact"/>
	<ui:outputText aura:id="contact" value="This is an example of a help text"/>
	</p>
	<p>
<auradocs:codeblock>
&lt;ui:inputText label="Contact Name" labelPosition="top" ariaDescribedby="contact" /&gt;
&lt;ui:outputText aura:id="contact" value="This is an example of a help text." /&gt;
</auradocs:codeblock> 
	</p>
	<p>
	To convey audio notifications, use the <code>ui:message</code> component, which has <code>aria-live="assertive"</code> and <code>role="alert"</code> set on the component by default.
	 <ui:message title="Error" severity="error" closable="true">
      This is an error message with an assertive aria-live setting.
 	 </ui:message>
<auradocs:codeblock>
 &lt;ui:message title="Error" severity="error" closable="true"&gt;
      This is an error message.
  &lt;/ui:message&gt;
</auradocs:codeblock> 
	</p>
    <p> For information on field-level errors, see <auradocs:topicLink topic="error">Validating Fields</auradocs:topicLink>.</p>
    
    <h3>Images</h3>
    <p>For an image to be accessible, set an appropriate alternative text attribute. If your image is informational, or actionable as part of a hyperlink, set the <code>alt</code> attribute to a descriptive alternative text.
    	If the image is purely decorative, set <code>imageType="decorative"</code>. This generates a null <code>alt</code> attribute in the <code>img</code> tag.

<auradocs:codeblock>
&lt;ui:image src="s.gif" imageType="informational" alt="Open Menu">
&lt;ui:image src="s.gif" imageType="decorative">
</auradocs:codeblock>
       When displaying an informational or actionable image via CSS, include the <code>assistiveText</code> class to provide an appropriate alternative text.
       
       <auradocs:codeblock>
       &lt;a class="like"&gt;
         &lt;span class="assistiveText"&gt;Like&lt;/span&gt;
       &lt;/a&gt;
       </auradocs:codeblock>

       See <auradocs:topicLink topic="img">Images</auradocs:topicLink> for more information.
    </p>
	
	<h3>Events</h3>
	<p>Although you can attach an <code>onclick</code> event to any type of element, for accessibility, consider only applying this event to elements that are actionable in HTML by default, such as
	 <code>&lt;a&gt;</code>, <code>&lt;button&gt;</code>, <code>&lt;input&gt;</code> in an Aura component. They should not be used on <code>&lt;div&gt;</code> and <code>&lt;span&gt;</code> tags for accessibility.
	For a non-actionable element, wrap <code>&lt;a&gt;</code> around it and add <code>onclick</code>.
<auradocs:codeblock>
&lt;a onclick="<aura:text value="{!"/>c.doSomething}"&gt;<aura:text value="{!"/>v.body}&lt;/a&gt;	
</auradocs:codeblock>
     </p>   
    <p>
    <b>See Also:</b><br/>
    <auradocs:topicLink topic="accessIntro">Aura and Accessibility</auradocs:topicLink><br />
    <auradocs:topicLink topic="helloWorld">Components Overview</auradocs:topicLink><br />
    <auradocs:topicLink topic="helloActions">Client-Side Controllers</auradocs:topicLink>
    </p>
</aura:component>