<!--

    Copyright (C) 2012 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">
    <aura:set attribute="title" value="Applying HTML and CSS"/>

    <p>Components can contain more than just text. Let's add some HTML and CSS to the mix.</p>

    <h2>HTML in Components</h2>

    <p>Use HTML in components like you would in a standard HTML file. You can also use HTML attributes and DOM events, such as <code>onclick</code>.
    </p>

    <auradocs:warning>Note: Aura disallows a few HTML tags deemed to be unsafe or unnecessary, like <code>&lt;applet&gt;</code> and <code>&lt;font&gt;</code>.  For a full list of supported tags, see <auradocs:topicLink topic="htmlTags">Supported HTML Tags</auradocs:topicLink>.</auradocs:warning>

    <p>An HTML tag is treated as a first-class component in Aura.  In fact, each HTML tag is translated into an Aura component, allowing it to enjoy the same rights and privileges as any component defined in the filesystem.  This might not mean much to you right now, but you'll see some benefits later.</p>

    <h2>CSS in Components</h2>

    <p>To add CSS to a component, add a new file to the component bundle called <code>&lt;componentName&gt;.css</code>.  Aura automatically picks up this new resource and auto-wires it when the component is used in a page. For external CSS resources, see <auradocs:topicLink topic="createAppTemplate">Creating App Templates</auradocs:topicLink>.</p>

    <p>All top-level elements in a component have a special <code>THIS</code> CSS class added to them. This, effectively, adds namespacing to CSS and helps prevent one component's CSS from blowing away another component's styling. Aura throws an error if a CSS file doesn't follow this convention.</p>

    <p>Let's look at a sample <code>helloHTML.cmp</code> component. The CSS is in <code>helloHTML.css</code> and you can see it in the <code>css://style</code> tab. If you need a CSS refresher, see <a href="http://reference.sitepoint.com/css">http://reference.sitepoint.com/css</a>.</p>

    <p>The top-level elements match the <code>THIS</code> class and render with a grey background.</p>

    <p>The <code>&lt;div class="white"&gt;</code> element matches the <code>.THIS.white</code> selector and renders with a white background. Note that there is no space in the selector as this rule is for top-level elements.</p>

    <p>The <code>&lt;li class="red"&gt;</code> element matches the <code>.THIS .red</code> selector and renders with a red background. Note that this is a descendant selector and it contains a space as the <code>&lt;li&gt;</code> element is not a top-level element.</p>

    <auradocs:example descriptor="auradocs:helloHTML" />

    <h2>Summary</h2>

    <ul>
    <li> HTML tags are first-class citizens in Aura.</li>
    <li> Add component-specific CSS to a component's bundle by creating a file with the same name as the component and a <code>.css</code> file extension.</li>
    <li> Each top-level element in a component is rendered with a namespaced CSS class.</li>
    </ul>
</aura:component>
