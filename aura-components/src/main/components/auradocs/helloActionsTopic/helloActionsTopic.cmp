<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">

    <aura:set attribute="title" value="Client-Side Controllers"/>

    <p>A client-side controller is used to handle events within a component. It is a JavaScript file that defines the action functions for all of the component's actions. Each action function takes in two parameters: the component to which the controller belongs and the event that the action is handling.</p>

    <h2>Creating a Client-Side Controller </h2>

    <p>A client-side controller file is part of the component bundle. It is auto-wired if you follow the naming convention, <code>&lt;componentName&gt;Controller.js</code>.</p>

    <p>Alternatively, to reuse a client-side controller from another component, use the <code>controller</code> system attribute in <code>aura:component</code> instead. For example, this component uses the auto-wired client-side controller for <code>auradocs.sampleComponent</code> in <code>auradocs/sampleComponent/sampleComponentController.js</code>.</p>

<auradocs:codeblock><![CDATA[
<aura:component
    controller="js://auradocs.sampleComponent">
    ...
</aura:component>]]>
</auradocs:codeblock>

    <h2>Calling Client-Side Controller Actions</h2>

    <p>Let's start by looking at events on an HTML tag.  You can see the contents of <code>helloActions.cmp</code> in the <b>Component source</b> tab.</p>

    <auradocs:viewer descriptor="auradocs:helloActions" />

    <p>If you know some JavaScript, you might be tempted to write something like the first "Flawed" button in <code>helloActions.cmp</code> because you know that HTML tags are first-class citizens.</p>

    <p>However, the "Flawed" button won't work with Aura.  The reason is that Aura has its own event system.  DOM events are mapped to Aura events, since HTML tags are mapped to Aura components.</p>

    <h3>Handling Aura Events</h3>
    <p>Handle Aura events using actions in client-side component controllers. Aura events for common mouse and keyboard interactions are available with components that come out-of-the-box with Aura.
    When you extend these components, you have access to these events as well. For example, see the <auradocs:defLink descriptor="ui:button" defType="component">ui:button</auradocs:defLink> component reference. </p>
    <p>Let's look at the <code>onclick</code> attribute in the "Auraized" button, which invokes the <code>handleClick</code> action in the controller. The "Native" button uses the same syntax with the <code>press</code> attribute in the <code>&lt;ui:button&gt;</code> component.</p>

    <p>In this simple scenario, there is little difference between working with the "Native" button or the "Auraized" HTML button. However, when you start working with more complex reusable components, the components that come out-of-the-box with Aura can simplify your job by taking care of some of the plumbing that you would otherwise have to create yourself.
    </p>

    <h3>Accessing Component Attributes</h3>
    <p>Click the <b>js://controller source</b> tab to view the code for <code>helloActionsController.js</code>.
    In the <code>handleClick</code> function, notice that the first argument to every action is the component to which the controller belongs. And one of the most common things you'll want to do with this component is look at and change its attribute values.</p>

    <p><code>component.getAttributes()</code> returns an AttributeSet object, which enables you to access individual attribute values by calling <code>getRawValue("&lt;attributeName&gt;")</code>.  The <code>aura.log()</code> utility function attempts to find a browser console and logs the attribute value to it.</p>

    <auradocs:info>For more information on Aura's JavaScript API, see JavaScript API in the <auradocs:navLink location="reference">Reference tab</auradocs:navLink>.</auradocs:info>

    <h3>Invoking Another Action in the Controller</h3>
    <p>To call an action method from another method, get a reference to the other action. Then, use <code>$A.enqueueAction(a)</code> to add the action to the queue of actions to be executed. Client-side actions are not executed immediately. They are queued and run later, similar to how server-side actions are executed. You don’t get the return result immediately; the client action is enqueued and its return values are available in the callback. Previously, client-side actions were immediate. That old behavior is available temporarily, for migration purposes, by using the <code>action.runDeprecated()</code> method.</p>
    <auradocs:codeblock>
    runIt : function(cmp) {
        var a = cmp.get("c.otherFunction");
        //Set parameters or do something else
        $A.enqueueAction(a);
    }
    </auradocs:codeblock>
    <p>You can also move the common call to a helper file. See <auradocs:topicLink topic="helper">Helpers</auradocs:topicLink> for more information.</p>
    
    <h2>Background Actions</h2>
    <p>To mark a long running, lower priority client-side action as a background action, get an instance of that action object in JavaScript and call the <code>setBackground()</code> method. Client-side actions don’t need to make a server round trip so they are usually completed very quickly and setting them to background will not have much of an impact on performance. When the client-side actions in the queue are executed, the foreground actions are executed first and then the background actions are executed.</p>

    <p><b>See also:</b><br/>
    <auradocs:topicLink topic="eventsOverview">Event Handling Lifecycle</auradocs:topicLink><br/>
    <auradocs:topicLink topic="initHandler">Invoking Actions on Component Initialization</auradocs:topicLink><br/>
    <auradocs:topicLink topic="serverSideControllers">Server-Side Controllers</auradocs:topicLink>
    </p>

</aura:component>
