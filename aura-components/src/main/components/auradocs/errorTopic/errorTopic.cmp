<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">
    <aura:set attribute="title" value="Validating Fields"/>

    <p>You can validate fields using JavaScript. Typically, you validate the user input, identify any errors, and display the error messages.
    You can use Aura's default error handling or customize it with your own error handlers.

    <h2>Default Error Handling</h2>

      Aura can handle and display errors using the default error component, <auradocs:defLink descriptor ="ui:inputDefaultError">ui:inputDefaultError</auradocs:defLink>, without using custom error handlers.</p>

    <p>The following demo shows how Aura handles a validation error and uses the default error component to display the error message.</p>
     <p>When you enter a value and click <b>Submit</b>, an action in the controller validates the input and displays an error message if the input is not a number. Entering a valid input clears the error.
    <auradocs:example descriptor="auradocs:sampleError" />


    The controller uses a <auradocs:referenceTopicLink topic="api:SimpleValue">SimpleValue</auradocs:referenceTopicLink> object. It invalidates the input value using <code>setValid(false)</code> and clears any error using <code>setValid(true)</code>. You can add error messages to the input value using <code>addErrors()</code>. </p>

    <h2>Custom Error Handling</h2>

    <p><auradocs:defLink descriptor="ui:input">ui:input</auradocs:defLink> and its child components can handle errors using its <code>onError</code> and <code>onClearErrors</code> attributes, which are wired to your custom error handlers defined in a controller.
    <code>onError</code> maps to a <code>ui:validationError</code> event, and <code>onClearErrors</code> maps to <code>ui:clearErrors</code>.
  The input component can use the <code>ui:updateError</code> event to update the default error component, <auradocs:defLink descriptor ="ui:inputDefaultError">ui:inputDefaultError</auradocs:defLink>.</p>

    <p>The following demo shows how you can handle a validation error using custom error handlers and display the error message using the default error component.</p>

    <auradocs:example descriptor="auradocs:sampleErrors" />

    <p>When you enter a value and click <b>Submit</b>, an action in the controller executes. However, instead of letting Aura handle the errors, you have to provide a custom error handler using the <code>onError</code> attribute in the component. </p>

    <p>If the validation fails, <code>doAction</code> adds an error message using <code>setParams()</code> and fires your custom error handler.
    In the custom event handler, <code>handleError</code>, retrieve the errors by calling <code>getParam()</code> and invalidate the input value using <code>setValid(false)</code>.
    You can fire the <code>updateError</code> event to update the default error component.
    See <auradocs:referenceTopicLink topic="api:Event">Event</auradocs:referenceTopicLink> for more information.</p>

    <p>Similarly, you can customize how you want to clear the errors by using the <code>onClearErrors</code> event. See the <code>handleClearError</code> handler in the controller for an example.
    </p>

     <p><b>See also:</b><br/>
    <auradocs:topicLink topic="helloActions">Client-Side Controllers</auradocs:topicLink><br/>
    <auradocs:topicLink topic="eventsComp">Component Events</auradocs:topicLink><br/>
    <auradocs:topicLink topic="valueObjects">Value Objects</auradocs:topicLink>
    </p>
    </aura:component>
