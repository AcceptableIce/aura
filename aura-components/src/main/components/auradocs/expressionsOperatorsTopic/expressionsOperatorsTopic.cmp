<!--

    Copyright (C) 2012 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">
<aura:set attribute="title" value="Expression Operators Reference"/>

<p>The following operators are available in the Aura expression language.</p>

<h2>Arithmetic Operators</h2>

<p>Expressions based on arithmetic operators result in numerical values.</p>

<table class="table table-bordered table-striped">
<thead>
    <tr>
        <th>Operator</th>
        <th>Usage</th>
        <th>Description</th>
    </tr>
</thead>
<tbody>
    <tr>
        <td><code>+</code></td>
        <td><code>1 + 1</code></td>
        <td>Add two numbers.</td>
    </tr>
    <tr>
        <td><code>-</code></td>
        <td><code>2 - 1</code></td>
        <td>Subtract one number from the other.</td>
    </tr>
    <tr>
        <td><code>*</code></td>
        <td><code>2 * 2</code></td>
        <td>Multiply two numbers.</td>
    </tr>
    <tr>
        <td><code>/</code></td>
        <td><code>4 / 2</code></td>
        <td>Divide one number by the other.</td>
    </tr>
    <tr>
        <td><code>%</code></td>
        <td><code>5 % 2</code></td>
        <td>Return the integer remainder of dividing the first number by the second.</td>
    </tr>    
    <tr>
        <td><code>-</code></td>
        <td><code>-m.exp</code></td>
        <td>Unary operator. Reverses the sign of the succeeding number. For example if the value of <code>expenses</code> is <code>100</code>, then <code>-expenses</code> is <code>-100</code>.</td>
    </tr>
</tbody>
</table>

<h2>Numeric Literals</h2>

<table class="table table-bordered table-striped">
<thead>
    <tr>
        <th>Literal</th>
        <th>Usage</th>
        <th>Description</th>
    </tr>
</thead>
<tbody>
    <tr>
        <td>Integer</td>
        <td><code>2</code></td>
        <td>Integers are numbers without a decimal point or exponent.</td>
    </tr>
    <tr>
        <td>Float</td>
        <td><code>3.14</code><br/>
            <code>-1.1e10</code></td>
        <td>Numbers with a decimal point, or numbers with an exponent.</td>
    </tr>
    <tr>
        <td>Null</td>
        <td><code>null</code></td>
        <td>A literal null number. Matches the explicit null value <em>and</em> numbers with an undefined value.</td>
    </tr>
</tbody>
</table>

<h2>String Operators</h2>

<p>Expressions based on string operators result in string values.</p>

<table class="table table-bordered table-striped">
<thead>
    <tr>
        <th>Operator</th>
        <th>Usage</th>
        <th>Description</th>
    </tr>
</thead>
<tbody>
    <tr>
        <td><code>+</code></td>
        <td><code>'Title: ' + m.note.title</code></td>
        <td>Concatenates two strings together.</td>
    </tr>
</tbody>
</table>

<h2>String Literals</h2>

<p>String literals must be enclosed in single quotation marks <code>'like this'</code>.</p>

<table class="table table-bordered table-striped">
<thead>
    <tr>
        <th>Literal</th>
        <th>Usage</th>
        <th>Description</th>
    </tr>
</thead>
<tbody>
    <tr>
        <td>string</td>
        <td><code>'hello&nbsp;world'</code></td>
        <td>Literal strings must be enclosed in single quotation marks. Double quotation marks are reserved for enclosing Aura attributes, and must be escaped in strings.</td>
    </tr>
    <tr>
        <td>\&lt;escape&gt;</td>
        <td><code>'\n'</code></td>
        <td>Whitespace characters:
        <ul>
            <li><code>\t</code> (tab)</li>
            <li><code>\n</code> (newline)</li>
            <li><code>\r</code> (carriage return)</li>
        </ul>

        <p>Escaped characters:</p>
        <ul>
            <li><code>\"</code> (literal ")</li>
            <li><code>\'</code> (literal ')</li>
            <li><code>\\</code> (literal \)</li>
        </ul>
        </td>
    </tr>
    <tr>
        <td>Unicode</td>
        <td><code>'\u####'</code></td>
        <td>A Unicode code point. The # symbols are hexadecimal digits. A Unicode literal requires four digits.</td>
    </tr>
    <tr>
        <td>null</td>
        <td><code>null</code></td>
        <td>A literal null string. Matches the explicit null value and strings with an undefined value.</td>
    </tr>
</tbody>
</table>

<h2>Comparison Operators</h2>

<p>Expressions based on comparison operators result in a true or false value.
For comparison purposes, numbers are treated as the same type (internally, all numbers are represented as doubles, but this may change in the future). In all other cases, comparisons check both value and type.</p>

<table class="table table-bordered table-striped">
<thead>
    <tr>
        <th>Operator</th>  
        <th>Alternative</th>      
        <th>Usage</th>
        <th>Description</th>
    </tr>
</thead>
<tbody>
    <tr>
        <td><code>==</code></td>
        <td><code>eq</code></td>
        <td><code>1 == 1</code><br/>
            <code>1 == 1.0</code><br/>
            <code>1 eq 1</code></td>
        <td>Returns <code>true</code> if the operands are equal. This comparison is valid for all data types.</td>
    </tr>
    <tr>
        <td><code>!=</code></td>
        <td><code>ne</code></td>
        <td><code>1 != 2</code><br/>
            <code>1 != true</code><br/>
            <code>1 != '1'</code><br/>
            <code>null != false</code><br/>
            <code>1 ne 2</code></td>
        <td>Returns <code>true</code> if the operands are not equal. This comparison is valid for all data types.</td>
    </tr>
    <tr>
        <td><code>&lt;</code></td>
        <td><code>lt</code></td>
        <td><code>1 &lt; 2</code><br/>
            <code>1 lt 2</code></td>
        <td>Returns <code>true</code> if the first operand is numerically less than the second. You must escape the <code>&lt;</code> operator to <code>&#38;lt;</code> to use it in Aura markup. 
        Alternatively, you can use the <code>lt</code> operator.</td>
    </tr>
    <tr>
        <td><code>&gt;</code></td>
        <td><code>gt</code></td>
        <td><code>42 &gt; 2</code><br/>
            <code>42 gt 2</code></td>
        <td>Returns <code>true</code> if the first operand is numerically greater than the second.</td>
    </tr>
    <tr>
        <td><code>&lt;=</code></td>
        <td><code>le</code></td>
        <td><code>2 &lt;= 42</code><br/>
            <code>2 le 42</code></td>
        <td>Returns <code>true</code> if the first operand is numerically less than or equal to the second. You must escape the <code>&lt;=</code> operator to <code>&#38;lt;=</code> to use it in Aura markup. 
        Alternatively, you can use the <code>le</code> operator.</td>
    </tr>
    <tr>
        <td><code>&gt;=</code></td>
        <td><code>ge</code></td>
        <td><code>42 &gt;= 42</code><br/>
            <code>42 ge 42</code></td>
        <td>Returns <code>true</code> if the first operand is numerically greater than or equal to the second.</td>
    </tr>
</tbody>
</table>

<h2>Logical Operators</h2>

<p>Expressions based on logical operators result in a <code>true</code> or <code>false</code> value.</p>

<table class="table table-bordered table-striped">
<thead>
    <tr>
        <th>Operator</th>
        <th>Usage</th>
        <th>Description</th>
    </tr>
</thead>
<tbody>
    <tr>
        <td><code>&amp;&amp;</code></td>
        <td><code>isEnabled &amp;&amp; hasPermission</code></td>
        <td>Returns <code>true</code> if both operands are individually true. You must escape the <code>&amp;&amp;</code> operator to <code>&#38;amp;&#38;amp;</code> to use it in Aura markup. 
        Alternatively, you can use the <code>and()</code> function and pass it two arguments. For example, <code>and(isEnabled, hasPermission)</code>. 
        </td>
    </tr>
    <tr>
        <td><code>||</code></td>
        <td><code>hasPermission || isRequired</code></td>
        <td>Returns <code>true</code> if either operand is individually true.</td>
    </tr>
    <tr>
        <td><code>!</code></td>
        <td><code>!isRequired</code></td>
        <td>Unary operator. Returns <code>true</code> if the operand is false. This operator should not be confused with the <code>!</code> delimiter used to start an expression in <code>{!</code>. 
        You can combine the expression delimiter with this negation operator to return the logical negation of a value, for example, <code><aura:text value="{!"/>!true}</code> returns <code>false</code>. </td>
    </tr>
</tbody>
</table>

<h2>Logical Literals</h2>

<p>Logical values are never equivalent to non-logical values. That is, only <code>true == true</code>, and only <code>false == false</code>; <code>1 != true</code>, 
and <code>0 != false</code>, and <code>null != false</code>.</p>

<table class="table table-bordered table-striped">
<thead>
    <tr>
        <th>Literal</th>
        <th>Usage</th>
        <th>Description</th>
    </tr>
</thead>
<tbody>
    <tr>
        <td>true</td>
        <td><code>true</code></td>
        <td>A boolean <code>true</code> value.</td>
    </tr>
    <tr>
        <td>false</td>
        <td><code>false</code></td>
        <td>A boolean <code>false</code> value.</td>
    </tr>
</tbody>
</table>

<h2>Conditional Operator</h2>

<p>There is only one conditional operator, the traditional ternary operator.</p>

<table class="table table-bordered table-striped">
<thead>
    <tr>
        <th>Operator</th>
        <th>Usage</th>
        <th>Description</th>
    </tr>
</thead>
<tbody>
    <tr>
        <td><code>? :</code></td>
        <td><code>(1 != 2) ? "Obviously" : "Black is White"</code></td>
        <td>The operand before the <code>?</code> operator is evaluated as a boolean. If true, the second operand is returned. If false, the third operand is returned.</td>
    </tr>
</tbody>
</table>

 <p><b>See also:</b><br/>    
    <auradocs:topicLink topic="expressionsFunctions">Expression Functions Reference</auradocs:topicLink>    
 </p>
</aura:component>
