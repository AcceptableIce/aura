<!--

    Copyright (C) 2012 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">
    <aura:set attribute="title" value="Application Events"/>

    <p>Application events follow a traditional publish-subscribe model. An application event is fired from an instance of a component.</p>
    
    <h2>Handling Application Events</h2>
    
    <p>Application event handlers are declared per component, in the component definition's <code>.cmp</code> file. All components that provide a handler for the event are notified.</p>

    <h2>Application Events Overview</h2>   

     <p>This chart summarizes how Aura processes application events, with minor differences to <auradocs:topicLink topic="eventsComp">component events</auradocs:topicLink>.</p>
     <p><ui:image src="/auraFW/resources/aura/images/appEvents.jpg" alt="Application Event Overview" /></p>

     <h2>File Resources for Application Events</h2>
     <p>Application events are handled by the files listed here. Note that only the controller files must follow the file name convention
    <code>&lt;notifier&gt;Controller.js</code> and <code>&lt;handler&gt;Controller.js</code>. The controllers are auto-wired to the notifier component and handler component.
    View <auradocs:topicLink topic="eventsDemo">source files and demo</auradocs:topicLink> to see how Aura events work.</p>

       <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>File Type</th>
                <th>File Name</th>
                <th>Description</th>
                <th>Usage</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Application Event</td>
                <td><code>appEvent.evt</code></td>
                <td>Defines the event. </td>
                <td>Uses <code>type="APPLICATION"</code> in the <code>aura:event</code> tag and contains attribute <code>name="context"</code>.
                    The <code>context</code> attribute passes the context of where the event was fired to the handler.</td>
            </tr>
            <tr>
                <td>Notifier Component</td>
                <td><code>eventsNotifier.cmp</code></td>
                <td>Initiates the event. </td>
                <td>Contains a browser event such as <code>onclick</code> that initiates the event. Note that we don't need to use the <code>aura:registerevent</code> tag that was required for the component event notifier.</td>
            </tr>
            <tr>
                <td>Notifier JavaScript Controller</td>
                <td><code>eventsNotifierController.js</code></td>
                <td>Fires the event.</td>
                <td>The <code>onclick</code> action in the notifier component has a value of <code><aura:text value="{!"/>c.fireApplicationEvent}</code>, so the corresponding action in the controller is executed.
                The event is fired by the <code>fire()</code> method, and is identified by <code>$A.get("e.auradocs:helloEventsApplicationEvent")</code>.
                In JavaScript, <code>$A</code> is a shortcut for <code>aura</code>. Use the <code>e.</code> prefix to access an application event.
           </td>
            </tr>
            <tr>
                <td>Handler Component</td>
                <td><code>eventsHandler.cmp</code></td>
                <td>Contains the notifier component.</td>
                <td>The <code>onclick</code> action in the notifier component has a value of <code><aura:text value="{!"/>c.fireApplicationEvent}</code>, so the corresponding action in the controller is executed.
                The event is fired by the <code>fire()</code> method, and is identified by <code>$A.get("e.auradocs:helloEventsApplicationEvent")</code>.
                In JavaScript, <code>$A</code> is a shortcut for <code>aura</code>. Use the <code>e.</code> prefix to access an application event.
           </td>
            </tr>
            <tr>
                <td>Handler JavaScript Controller</td>
                <td><code>eventsHandlerController.js</code></td>
                <td>Contains a function that is executed after the event is fired.</td>
                <td>The controller function is executed when the event is fired, and may be used to set attributes that are displayed in the handler component.
           </td>
            </tr>
        </tbody>
       </table>
</aura:component>
