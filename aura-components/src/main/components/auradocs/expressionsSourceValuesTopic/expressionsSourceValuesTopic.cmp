<!--

    Copyright (C) 2012 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">
<aura:set attribute="title" value="Accessing Data using Expressions"/>

<p>Most expressions work with values related to the state of your application or the data within it. Aura provides components with easy ways to access data, related code, and other useful things.</p>

<h2>Value Providers</h2>

<p><em>Value providers</em> are one way to access data. Value providers encapsulate related values together, similarly to how an object encapsulates properties and methods. A number of value providers were introduced in <auradocs:topicLink topic="expressionsExamples">Example Expressions</auradocs:topicLink>, for example, <code>m</code>, <code>v</code>, and <code>c</code>.</p>

<p><code>v</code> (for "view", as in "model-view-controller") is the value provider for a component's own attribute set. A component's model is <code>m</code> and generally represents data persisted on a back end service. A component's controller is <code>c</code> and contains actions and event handlers for the component.</p>

<p>All components have a <code>v</code> value provider, but aren't required to have a controller or model. All three value providers are created automatically when defined for a component.</p>

<p>Values in a value provider are accessed as named properties. To use a value, separate the value provider and the property name with a dot (period). For example, <code>v.body</code> or <code>m.title</code>.</p>

<h2>Accessing Fields and Related Objects</h2>

<p>When an attribute of a component is an object or other structured data (not a primitive value), access values on that attribute using the same dot notation.</p>

<p>For example, if a component has an attribute <code>note</code>, access a note value such as <code>title</code> using the <code>v.note.title</code> syntax. This example shows usage of this nested syntax for a few attributes.</p>

<auradocs:codeblock>&lt;aura:component&gt;
    &lt;aura:attribute name="note" type="java://org.auraframework.demo.notes.Note"/&gt;
    &lt;ui:block&gt;
        &lt;aura:set attribute="left"&gt;
            &lt;ui:outputDateTime value="<aura:text value="{!"/>v.note.createdOnAsCalendar}" format="h:mm a"/&gt;
        &lt;/aura:set&gt;
        &lt;aura:set attribute="right"&gt;
            &lt;h2&gt;<aura:text value="{!"/>v.note.title}&lt;/h2&gt;
        &lt;/aura:set&gt;
    &lt;/ui:block&gt;
    &lt;aura:unescapedHtml value="<aura:text value="{!"/>v.note.body}"/&gt;
&lt;/aura:component&gt;</auradocs:codeblock>

<p>For deeply nested objects and attributes, continue adding dots to traverse the structure and access the nested values.</p>

<h2>Globals</h2>

<p>In addition to the value providers related to a component, there are global values and methods that a component can use in expressions.</p>

<h3><code>$Label</code></h3>

<p>Label files make it easier to translate and localize your applications by separating messages from source code. <code>$Label</code> makes it easy for you to use label files in your Aura application. Labels are hierarchical, and you access them using dot notation, <code>$Label.&lt;section&gt;.&lt;message_name&gt;</code>. For example, see the Like Button code sample previously shown, where messages are retrieved from labels:</p>

<code><aura:text value="{!"/>$Label.SocialApp.YouAndOthersLike}</code>

<p>If your platform already provides an analogous service, you can write an adapter to use <code>$Label</code> with it. <!-- See Localizing Your Application with Labels for more details. --></p>

<h3><code>globalID</code></h3>

<p>A globally unique identifier you can use to find and access a component. See <auradocs:topicLink topic="findById">Finding Components by ID</auradocs:topicLink> for more details. </p>

<h3><code>$Browser</code></h3>

<p>This is a reserved global variable, which in the future will provide various details regarding the capabilities of the user agent accessing the application.</p>

</aura:component>
