<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">

    <aura:set attribute="title" value="Client-Side Providers"/>

    <p>A provider enables you to use an abstract component or an interface in markup. The framework uses the provider to determine the concrete component to use at runtime.</p>

    <p><auradocs:topicLink topic="oodProviders">Server-side providers</auradocs:topicLink> are more common, but if you don't need to access the server when you're creating a component, you can use a client-side provider instead.</p>

    <auradocs:warning>The framework behavior is undefined if a component has a client-side provider and a server-side provider that return different values. It's preferable to only use a server-side or a client-side provider unless you need both.</auradocs:warning>

    <h2>Creating a Provider</h2>

    <p>A client-side provider is part of the component bundle and is auto-wired if you follow the naming convention, <code>&lt;componentName&gt;Provider.js.</code></p>

    <p>To reuse a provider from another component, you can use the <code>provider</code> system attribute in <code>aura:component</code> instead. For example, this component uses the auto-wired provider for <code>auradocs.sampleComponent</code> in <code>auradocs/sampleComponent/sampleComponentProvider.js</code>.</p>

<auradocs:codeblock><![CDATA[
<aura:component
    provider="js://auradocs.sampleComponent">
    ...
</aura:component>]]>
</auradocs:codeblock>

 <auradocs:warning>If you are reusing a provider  from another component and you already have an auto-wired provider in your component bundle, the methods in your auto-wired provider will not be accessible.
      We recommend that you use a provider within the component bundle for maintainability and use an external provider only if you must.</auradocs:warning>

    <p>A client-side provider file is a simple JavaScript object that defines the <code>provide</code> function. For example, this provider returns a string that defines the topic to display.</p>

    <!-- not mentioning optional localCreation parameter until add more doc about local cmp creation -->
<auradocs:codeblock>({
    provide : function (cmp) {
        var topic = cmp.get('v.topic');
        return 'auradocs' + topic + 'Topic';
    }
})
</auradocs:codeblock>

    <p>Instead of a string, a provider can return a JSON object to provide both the concrete component and set some additional attributes. For example:</p>

<auradocs:codeblock>({
    provide : function (cmp) {
        var topic = cmp.get('v.topic');
        return {
            componentDef: 'auradocs' + topic + 'Topic',
            attributes: {
                "type": "task"
            }
        }
    }
})
</auradocs:codeblock>

    <p>You can omit the <code>componentDef</code> entry if the component is already concrete and you only want to provide attributes.</p>

    <h2>Declaring Provider Dependencies</h2>
    
    <p>The Aura framework automatically tracks dependencies between definitions, such as components. However, if a component uses a provider that instantiates components that are not directly referenced elsewhere, use <code>&lt;aura:dependency&gt;</code> in the component to explicitly tell the framework about the dependency, which wouldn't otherwise be discovered by Aura.</p>
    
    <p><b>See also:</b><br/>
        <auradocs:topicLink topic="oodCmpAbstract">Abstract Components</auradocs:topicLink><br/>
        <auradocs:topicLink topic="oodInterfaces">Interfaces</auradocs:topicLink><br/>
        <auradocs:topicLink topic="compBundle">Component Bundles</auradocs:topicLink><br/>
        <auradocs:topicLink topic="tagDependency">aura:dependency</auradocs:topicLink>
    </p>

</aura:component>
