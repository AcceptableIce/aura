<!--

    Copyright (C) 2012 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">
       <aura:set attribute="title" value="aura:iteration "/>

       <p>Renders a view of a collection of items. Data changes are re-rendered automatically on the page.</p>
       <auradocs:info>This component replaces <code>aura:forEach</code>, which is deprecated.</auradocs:info>


       <p>
       <table class="table table-bordered table-striped">
          <thead>
              <tr>
                     <td><b>Attribute Name</b></td>
                     <td><b>Type</b></td>
                     <td><b>Description</b></td>
                     <td><b>Required?</b></td>
              </tr>
          </thead>
          <tbody>
              <tr>
                     <td><code>body</code></td>
                     <td>ComponentDefRef[]</td>
                     <td>Template to use when creating components for each iteration. You can put any markup in the <code>body</code>.
                     A ComponentDefRef[] stores the metadata of the component instances to create on each iteration, and each instance is then stored in <code>realbody</code>.
                     </td>
                     <td>Y</td>
              </tr>
              <tr>
                     <td><code>end</code></td>
                     <td>Integer</td>
                     <td>The index of the collection to stop at (exclusive).</td>
                     <td></td>
              </tr>
              <tr>
                     <td><code>indexVar</code></td>
                     <td>String</td>
                     <td>The variable name to use for the index of each item inside the iteration.</td>
                     <td></td>
              </tr>
              <tr>
                     <td><code>items</code></td>
                     <td>List</td>
                     <td>The collection of data to iterate over.</td>
                     <td>Y</td>
              </tr>
              <tr>
                     <td><code>realbody</code></td>
                     <td>Component[]</td>
                     <td>Do not use. Any value set is ignored. Placeholder for body rendering.</td>
                     <td></td>
              </tr>

              <tr>
                     <td><code>start</code></td>
                     <td>Integer</td>
                     <td>The index of the collection to start at (inclusive).</td>
                     <td></td>
              </tr>
              <tr>
                     <td><code>var</code></td>
                     <td>String</td>
                     <td>The variable name to use for each item inside the iteration.</td>
                     <td>Y</td>
              </tr>
          </tbody>
       </table>
       </p>

       <h2>Usage</h2>

       <p>This sample shows a dynamic iteration involving user input and view update using the controller file. The <b>Component source</b> tab shows the component markup,   <code>sampleIteration.cmp</code>. The <b>js://controller source</b> tab shows the component's client-side controller, <code>sampleIterationController.js</code></p>

       <auradocs:example descriptor="auradocs:sampleIteration" />

       <p>The sample component iterates over a set of values retrieved from the model. You can update one of the entries and see the change rendered on the page.</p>

        <p>In the <code>container</code> <code>div</code> element, the <code><aura:text value="{!"/>m.data}</code> expression returns <code>getData()</code> from the model class.
    The component iterates through the List of HashMap objects returned by <code>getData()</code> in the model. Each item corresponds to <code>stuff</code>, denoted by the <code>var</code> attribute. So <code><aura:text value="{!"/>stuff.letters}</code> in the output displays the value associated with the <code>letters</code> key in each Map.</p>

        <p>When you click Go in the component, it calls <code>changeOneValue</code> in the client-side controller. The function changes the <code>tochange</code> attribute to <code>newvalue</code> and the updated value is rerendered on the page.</p>

</aura:component>
