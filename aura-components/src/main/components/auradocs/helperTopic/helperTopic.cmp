<!--

    Copyright (C) 2012 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">
    <aura:set attribute="title" value="Helpers"/>

    <p>A helper file contains JavaScript functions that can be called from a client-side controller or renderer for a component. Put functions that you want to reuse and call from a controller and renderer in the component's helper file.</p>

    <h2>Creating a Helper</h2>

    <p>A helper file is part of the component bundle and is auto-wired if you follow the naming convention, <code>&lt;componentName&gt;Helper.js</code>.</p>

    <p>To reuse a helper from another component, you can use the <code>helper</code> system attribute in <code>aura:component</code> instead. For example, this component uses the auto-wired helper for <code>auradocs.sampleComponent</code> in <code>auradocs/sampleComponent/sampleComponentHelper.js</code>.</p>

<auradocs:codeblock><![CDATA[
<aura:component
    helper="js://auradocs.sampleComponent">
    ...
</aura:component>]]>
</auradocs:codeblock>

     <p>If you are reusing a helper from another component and you already have an auto-wired helper in your component bundle, the methods in your auto-wired helper will not be accessible unless you explicitly declare it. Otherwise, only helpers in bundles that the component extends will be accessible.
     </p>

    <p>To use both your auto-wired helper and an external one in a component, specify both helper files on the component: <code>  helper="js://auradocs.sampleComponent, js://auradocs.anotherComponent"</code>.
         We recommend that you use a helper  within the component bundle for maintainability and use an external helper only if you must. </p>

    <h2>Using a Helper in a Renderer</h2>

    <p>Add a helper argument to a renderer function to enable the function to use the helper. In the renderer, specify <code>(component, helper)</code> as parameters in a function signature to enable the function to access the component's helper. These are standard parameters and you don't have to access them in the function.
    The following code shows an example on how you can override the <code>afterRender()</code> function in the renderer and
    call <code>open</code> in the helper method.</p>

    <p><b>detailsRenderer.js</b></p>

<auradocs:codeblock>({
    afterRender : function(component, helper){
        helper.open(component, null, "new");
    }
})</auradocs:codeblock>

    <p><b>detailsHelper.js</b></p>

<auradocs:codeblock>({
    open : function(component, note, mode, sort){
        if(mode === "new") {
            //do something
        }
        // do something else, such as firing an event
    }
})</auradocs:codeblock>

        <p>For an example on using helper methods to customize renderers, see
    <auradocs:topicLink topic="renderers">Customizing Renderers</auradocs:topicLink>.</p>

    <h2>Using a Helper in a Controller</h2>

    <p>Similarly, add a helper argument to a controller function to enable the function to use the helper.
    Specify <code>(component, event, helper)</code> in the controller. These are standard parameters and you don't have to access them in the function.
    The following code shows you how to reuse the <code>open</code> function in a controller.</p>

    <p><b>detailsController.js</b></p>

<auradocs:codeblock>({
    openNote: function(component, event, helper) {
        var note = event.getParam("note");
        var mode = event.getParam("mode");
        var sort = event.getParam("sort");
        helper.open(component, note, mode, sort);
    }
})</auradocs:codeblock>

    <p><b>See also:</b><br/>
        <auradocs:topicLink topic="compBundle">Component Bundles</auradocs:topicLink>
    </p>

</aura:component>
