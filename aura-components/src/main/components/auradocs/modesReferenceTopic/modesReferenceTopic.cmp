<!--

    Copyright (C) 2012 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">

    <aura:set attribute="title" value="Modes Reference"/>

    <p>This section lists all the modes that Aura supports. The list of modes in Aura is defined in <a href="http://jenkins.auraframework.org/view/All/job/lumen_doc/javadoc/index.html?org/auraframework/system/AuraContext.html" target="_new">AuraContext</a>.</p>

    <p>Every request in Aura is associated with a context. After initial loading of an app, each subsequent request is an XHR POST that contains your Aura context configuration, which includes the mode to run in, the name of the app, and the namespaces that already have preloaded metadata on the client.</p>

    <p>We split the list of modes into two sections here to differentiate between runtime and test modes. This split is purely to cluster similar modes together in the documentation. All the runtime and core modes are defined in the <code>Mode</code> enum in <code>AuraContext</code>.</p>

    <p>All modes are available by default in your app. For information on controlling which modes are available, see <auradocs:topicLink topic="modesAvailableSet">Controlling Available Modes</auradocs:topicLink>.</p>

    <h2>Google Closure Compiler</h2>

    <p>Many of the modes use the Google Closure Compiler, which is a tool for optimizing JavaScript code.</p>

    <h2>Runtime Modes</h2>

    <p>Use these modes for running in development or production.</p>
	
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Mode</th>
                <th><code>PROD</code></th>
                <th><code>DEV</code></th>
                <th><code>PRODDEBUG</code></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><b>Usage</b></td>
                <td>Use for apps in production. The framework is optimized for performance rather than ease of debugging in this mode.</td>
                <td>Use for apps in development. The framework is configured for ease of debugging in this mode.</td>
                <td>Use temporarily to debug apps in production.</td>
            </tr>
            <tr>
            	<td><b>Debugging</b></td>
            	<td>Not recommended for debugging.<p>Since <code>PROD</code> mode is intended for apps in production, test modes, such as <code>SELENIUM</code>, are preferable for running tests, especially concurrent tests.</p></td>
            	<td>Facilitates debugging. Pretty prints JSON responses from the server. Exposes private members in some framework JavaScript objects.</td> 
            	<td>Similar to <code>PROD</code> mode</td>
            </tr>
            <tr>
            	<td><b>Access</b></td>
            	<td>Disables access to a <code>.cmp</code> resource in a URL. You can only access a <code>.app</code> resource.</td>
            	<td>Enables a <code>.cmp</code> resource to be addressed in a URL</td>
            	<td>Similar to <code>PROD</code> mode</td>
            </tr>
            <!-- Not enforced so comment out for now 
            <tr>
            	<td><b>GA Component Access</b></td>
            	<td>Allows GA components only</td>
            	<td>Allows non-GA components</td>
            	<td>Similar to <code>PROD</code> mode</td>
            </tr>
            -->
            <tr>
            	<td><b>Google Closure Compiler</b></td>
            	<td>Uses the Google Closure Compiler to optimize the JavaScript code. The method names and code are heavily obfuscated.</td>
                <td>Uses the Google Closure Compiler to lightly obfuscate the names of non-exported JavaScript methods. This is meant to avoid unintentional usage of non-exported methods. See <auradocs:topicLink topic="codeJavaScriptIntro">Publicly Accessible JavaScript Methods</auradocs:topicLink>.</td>
                <td>Does not use Google Closure Compiler</td>
            </tr>
            <tr>
            	<td><b>Security Provider</b></td>
            	<td>Requires an app to implement a security provider. The default security provider prevents access to any resources in this mode.</td>  
                <td>Enables you to access an app that doesn’t implement a security provider. The default security provider provides access to all resources in this mode.</td>
                <td>Similar to <code>PROD</code> mode</td>
            </tr>
            <tr>
            	<td><b>Caching</b></td>
            	<td>Caches code. When a file change is detected, this mode performs a full closure compile on all units.</td>   
                <td>Caches code. When a file change is detected, this mode clears the cache and recompiles definitions.</td>  
                <td>Similar to <code>PROD</code> mode</td>
            </tr>         
        </tbody>
    </table>

    <h2>Test Modes</h2>

    <p>Use these modes for running different flavors of tests. The various test modes mainly expose extra JavaScript calls that are not available in runtime modes.</p>

    <p>In all test modes, caching of registries between tests is disabled. If you modify a cached definition in a test, the modified cached definition is not visible to subsequent tests.</p>

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Mode</th>
                <th>Usage</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>JSTEST</code></td>
                <td>Use for running component tests. If your component or app has a <code>&lt;componentName&gt;Test.js</code> file in its bundle, a browser page is displayed to run the tests. A tab is displayed for each test case in your test suite. Each tab contains an iframe that loads the component in <code>AUTOJSTEST</code> mode and runs the single test case.

                    <p>The test results are displayed below the iframe. For a successful test run, the tab turns green; for a failure, it turns red.</p>
                </td>
            </tr>

            <tr>
                <td><code>JSTESTDEBUG</code></td>
                <td>Use for debugging component tests. Similar to <code>JSTEST</code> mode but doesn’t use the Google Closure Compiler.</td>
            </tr>

            <tr>
                <td><code>AUTOJSTEST</code></td>
                <td>Used by <code>JSTEST</code> mode when running inside the iframe for a test case. It enables extra JavaScript needed to execute the test case.

                    <p>Use this mode by requesting the component or app containing the test in <code>JSTEST</code> mode.</p>
                </td>
            </tr>

            <tr>
                <td><code>AUTOJSTESTDEBUG</code></td>
                <td>Used by <code>JSTESTDEBUG</code> mode when running inside the iframe for a test case. It enables extra JavaScript needed to execute the test case.

                    <p>Use this mode by requesting the component or app containing the test in <code>JSTESTDEBUG</code> mode.</p>
                </td>
            </tr>

            <tr>
                <td><code>PTEST</code></td>
                <td>Use for running performance tests using the Jiffy Graph UI. Loads Jiffy performance test tools and enables the Jiffy Graph UI. Jiffy is an end-to-end real-world web page instrumentation and measurement suite.

                    <p>This mode doesn’t use the Google Closure Compiler.</p>
                </td>
            </tr>

            <tr>
                <td><code>CADENCE</code></td>
                <td>Use for running performance tests if you want to use Jiffy metrics and track the numbers server-side. Loads and runs Jiffy performance test tools and logs the results on the server.
                    <p>Cadence tests use Jiffy, but don’t load the Jiffy Graph UI.</p>
                </td>
            </tr>

            <tr>
                <td><code>SELENIUM</code></td>
                <td>Use for tests with Selenium, a software testing framework for web apps. This mode uses the Google Closure Compiler.</td>
            </tr>

            <tr>
                <td><code>SELENIUMDEBUG</code></td>
                <td>Similar to <code>SELENIUM</code> mode but doesn’t use the Google Closure Compiler.</td>
            </tr>

            <tr>
                <td><code>UTEST</code></td>
                <td>Used for running unit tests against the framework. It allows developers of the framework to enable some debug code only during testing.</td>
            </tr>

            <tr>
                <td><code>FTEST</code></td>
                <td>Similar to <code>UTEST</code> mode, but used for functional tests instead of unit tests. This mode may expose different debug code than <code>UTEST</code> mode.</td>
            </tr>

            <tr>
                <td><code>STATS</code></td>
                <td>Used for compiling statistics for value objects for use with the <auradocs:topicLink topic="queryLang">query language</auradocs:topicLink>.</td>
            </tr>
        </tbody>
    </table>

    <p><b>See also:</b><br/>
        <auradocs:topicLink topic="compBundle">Component Bundles</auradocs:topicLink><br/>
        <auradocs:topicLink topic="modesSetDefault">Setting the Default Mode</auradocs:topicLink><br/>
        <auradocs:topicLink topic="securityProviders">Controlling Access with Security Providers</auradocs:topicLink><br/>
        <auradocs:topicLink topic="docTests">Testing Components</auradocs:topicLink>
    </p>

</aura:component>
