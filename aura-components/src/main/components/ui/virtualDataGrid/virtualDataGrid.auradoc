<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:documentation>
	<aura:description>
		<p>
			A <code>ui:virtualDataGrid</code> component represents a table containing rows of data that's provided by the <code>items</code> array.
			Headers are created by the <code>headerColumns</code> attribute. Columns are created by the <code>columns</code> attribute.  
			This component delegates click events into the component that's clicked in a column, which is responsible for handling the event.
		</p>
		<p>
		This is an example setup of a <code>ui:virtualDataGrid</code> component, which displays an Id and Name column.
		<pre>&lt;aura:component>
    &lt;aura:attribute name="data" type="List"/>
    &lt;ui:virtualDataGrid aura:id="myData" items="{!v.data}">
        &lt;aura:set attribute="headerColumns">
            &lt;ui:dataGridColumn label="Id" name="id" />
            &lt;ui:dataGridColumn label="Name" name="name" sortable="true"/>
        &lt;/aura:set>
       
        &lt;aura:set attribute="columns">
            {!item.id}
            {!item.name}
        &lt;/aura:set>
    &lt;/ui:virtualDataGrid>
&lt;/aura:component></pre>
		</p>
		<p>This client-side controller code sets data for the <code>columns</code> attribute, which can be done in an <code>init</code> handler.
		<pre>cmp.set("v.data", [{id: 1, name: "name1"}, 
                   {id: 2, name: "name2"},
                   {id: 3, name: "name3"}]);</pre>
		</p>
		<p>Alternatively, you can provide data via a data provider, which extends <code>ui:dataProvider</code>, and pass in an array of component configuration.</p>
		<pre>&lt;ui:virtualDataGrid>
    ... 
    &lt;aura:set attribute="dataModel">
        &lt;uiExamples:myDataProvider />
    &lt;/aura:set>
&lt;/ui:virtualDataGrid></pre>
		<p>Setting the <code>dataModel</code> attribute initializes the rows of data if a model with items exist. Otherwise, the data provider fires the <code>provide</code>
		event. Once the provider's data has changed, the table retrieves the data and set it as the <code>items</code> attribute.</p>
		
		<p>To add more rows, use <code>appendItems()</code>, which appends the items to the end of the <code>items</code> array.</p>
		<pre>var datagrid = cmp.find("myData");
datagrid.appendItems(rowData);</pre>

		<p>To handle column sorting, include <code>onsort="{!c.onsort}"</code> on your <code>ui:virtualDataGrid</code> component and mark your column with <code>sortable="true"</code>.</p>
		<pre> &lt;ui:dataGridColumn label="Name" name="name" sortable="true"/></pre>
		<p>The column header becomes an <code>&lt;a></code> tag. When clicked, the component fires the <code>onsort</code> and <code>provide</code> events, updating the table with the specified <code>sortBy</code> value.
		Additionally, you must use a data provider or another component to sort the data. See the Examples tab for more information.
		</p>
		<p>
		<code>ui:virtualDataGrid</code> can contain these components.
		<ul>
			<li><code>ui:dataGridActionColumn</code> - A column of actionable buttons or links</li>
			<li><code>ui:dataGridColumn</code> - A column of data</li>
			<li><code>ui:dataGridSelectionColumn</code> - A column of checkboxes for individual and multiple row selection</li>
			<li><code>ui:dataGridSummaryCell</code> - A value rendered in the table footer that computes a given column</li>
		</ul>
		You can use other <code>ui</code> components to represent your column data, such as <code>ui:outputText</code>.
		</p>
	
	</aura:description>	
	
		<aura:example name="simpleVirtualDataGridExample" ref="auradocs:demoVdatagrid" label="Loading Data in a Client-Side Controller">
			<p>This example initializes rows of data using a client-side controller. Clicking <b>Add row</b> appends a new row to the table.</p>
		</aura:example>
		
		<aura:example name="virtualDataGridExample" ref="uiExamples:virtualDataGridKitchenSink" label="Loading Data using a Data Provider">
    	<p>This example shows an implementation of <code>ui:virtualDataGrid</code> using a data provider, <code>uiExamples:dataGridKitchenSinkDataProvider</code>. 
    	The <code>init</code> handler initializes data in the columns. Clicking the <b>Change Columns</b> button replaces the last column with data from the first column.
    	Clicking the <b>Re-fire datagrid's provide</b> button loads the data in the columns by setting the <code>empty</code> attribute to <code>false</code> and firing the <code>provide</code> event.</p>
    	<p></p>
	</aura:example>
	
</aura:documentation>
