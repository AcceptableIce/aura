<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component support="PROTO">
	<aura:dependency resource="markup://ui:inlineEditPanelBody" type="COMPONENT" />
	
	<aura:import library="ui:inlineEditGridLib" property="lib"/>	
	
	<aura:attribute name="class"               type="String" />
	<aura:attribute name="editLayouts"         type="Object"/>
    <aura:attribute name="editPanelConfigs"    type="Object"                   description="A map of attributes for each edit panel by columnName. Sample map : {columnName : {attr1:value1, attr2:value2} }"/>
	<aura:attribute name="editable"            type="Boolean" default="true"   description="Editable status of the inline edit grid. If false, no inline edit functionality will be available."/>
	<aura:attribute name="inKeyboardMode"      type="Boolean" default="false"  description="Keyboard Mode status of the inline edit grid. If true, a visual indicator will be present and keyboard events will be captured."/>
	<aura:attribute name="enableKeyboardMode"  type="Boolean" default="true"   description="When true this grid allows a spreadsheet like navigation."/>

	<aura:attribute name="dataVar" type="String" default="data" description="The name of the variable to use for the data in each item inside the grid."/>
    
	<!-- Attributes used by the virtualDataGrid -->
	<aura:attribute name="items"           type="Object[]"                 description="A list of objects representing the rows of data in the grid"/>
	<aura:attribute name="itemVar"         type="String"   default="item"  description="The name of the variable to use for each row's item inside the grid"/>
	<aura:attribute name="headerColumns"   type="Aura.Component[]"         description="Components used as the header of the table"/>
	<aura:attribute name="columns"         type="Aura.ComponentDefRef[]"   description="Components used as the template for each row"/>
	
	<aura:attribute name="rowHeaderIndex"  type="Integer"                          description="Column index to convert into a row header"/>
	<aura:attribute name="delegatedEvents" type="String"  default="click,keydown"  description="List of events the grid should delegate, separated by comma."/>
	
	<!-- Column Resize Plugin Attributes -->
	<aura:attribute name="enableResizableColumns" type="Boolean"   description="Enables the column resize plugin. The default is false."/>
	<aura:attribute name="resizableColumnsConfig" type="Object"    description="The column resize configuration. If not provided, the default configuration is used."/>
	
    <!-- Event handlers -->
    <aura:handler name="init" value="{!this}" action="{!c.init}"/>
    <aura:handler name="gridAction" event="ui:gridAction" action="{!c.handleGridAction}"/>
    <aura:handler name="change" value="{!v.columns}" action="{!c.handleColumnsChange}"/>
	<aura:handler name="change" value="{!v.headerColumns}" action="{!c.handleHeadersChange}"/>
	<aura:handler name="change" value="{!v.enableKeyboardMode}" action="{!c.handleEnableKeyboardMode}"/>

    <aura:registerEvent name="onEdit"   type="ui:collectionValueChanged"    description="Event fired when a cell of the grid has been edited" />
	<aura:registerEvent name="onKeyboardModeEnter"  type="ui:focus"         description="Event fired when user enters keyboard mode" />
	<aura:registerEvent name="onKeyboardModeExit"   type="ui:blur"          description="Event fired when user exits keyboard mode" />
	<aura:registerEvent name="onKeyboardShortcut"   type="ui:gridAction"    description="Event fired when user presses Ctrl+S or Ctrl+. whilst in keyboard mode" />

	<!-- Events passed from the virtualDataGrid -->
	<aura:registerEvent name="onSort"          type="ui:sort"      description="The event fired when a column is sorted."/>
	<aura:registerEvent name="onColumnResize"  type="ui:resize"    description="The event fired when a column is resized."/>
	
	<!-- Grid Methods -->
	<aura:method name="enterKeyboardMode" description="Enters keyboard mode. Won't do anything if keyboard mode has been disabled">
		<aura:attribute name="editActiveCell" type="Boolean" description="If true, after keyboard mode is entered, the first activeCell will be set to edit"/>
	</aura:method>
	<aura:method name="exitKeyboardMode" description="Exits keyboard mode"/>

	<aura:method name="appendItems">
	   <aura:attribute name="items" type="Object"/>
	</aura:method>
	
    <aura:method name="updateItem">
        <aura:attribute name="item" type="Object" required="true" description="Updated item to be placed in the grid at the specified index."/>
        <aura:attribute name="index" type="Integer" required="true" description="Index of the target row within the grid."/>
    </aura:method>  
	
	<aura:method name="resizeColumns" description="Resizes columns if the plugin is enabled.">
	   <aura:attribute name="widths" type="Integer[]"/>
	</aura:method>
	
	<aura:method name="sort">
	   <aura:attribute name="sortBy" type="String"/>
	</aura:method>
	
	<!-- Component markup begins -->
	<!-- TODO: This could conflict if the Records Experience's inlineEdit feature uses the same classes. Revisit with SLDS integration -->
    <div class="{! 'slds-table--edit_container slds-is-relative ' + (v.editable ? ' inlineEdit--enabled' : ' inlineEdit--disabled') + (v.inKeyboardMode ? ' keyboardMode--active' : ' keyboardMode--inactive') +
					' inlineEditGrid'}">

        <ui:virtualDataTable
            aura:id="grid"
            class="{! v.class + ' slds-table--edit slds-table--bordered'}"
            items="{!v.items}"
			headerColumns="{!v.headerColumns}"
			itemVar="{!v.itemVar}"
							
			rowHeaderIndex="{!v.rowHeaderIndex}"
			delegatedEvents="{!v.delegatedEvents}"
							
			enableResizableColumns="{!v.enableResizableColumns}"
			resizableColumnsConfig="{!v.resizableColumnsConfig}"
			
			onsort="{!c.handleSort}"
			onColumnResize="{!c.handleColumnResize}"/>
	</div>
</aura:component>