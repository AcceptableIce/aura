<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extensible="true" extends="ui:abstractDataGrid" support="PROTO">

	<aura:attribute name="selectAll" type="Boolean" default="false" description="All selected."/>

	<!-- Private attributes -->
	<aura:attribute name="priv_rows" type="List" description="Rows constructed manually to wrap items."/>
	<aura:attribute name="priv_summaryRow" type="Aura.Component[]" description="Row constructed manually to aggregate column items."/>
	<aura:attribute name="priv_rowSwap" type="Boolean" default="false" description="Notify rows of mass row swap."/>

	<!-- Template facets -->
	<aura:attribute name="rowTemplate" 
					type="Aura.ComponentDefRef[]" 
					required="true" 
					description="Magical facet which determines the row shape. Cells are injected into it.">

		<ui:dataGridRow row="{!row}" index="{!index}" onitemchange="{!onitemchange}"/>
	</aura:attribute>
	
	<aura:attribute name="cellTemplate" 
					type="Aura.ComponentDefRef[]" 
					required="true" 
					description="Magical facet which determines the cell shape. Data is injected into it.">
		
		<ui:dataGridCell row="{!row}"/>
	</aura:attribute>
	
	<aura:handler name="init" value="{!this}" action="{!c.init}"/>
	<aura:handler name="change" value="{!v.items}" action="{!c.handleItemsChange}" description="This lives here due to a bug in value objects."/>

	<!-- 
	 ~ Default implementation is a table. Consider moving this logic to ui:dataTable 
	 ~ A dataTable is potentially a concrete of a dataGrid.
	 -->
	<table class="{! v.class + ' ' + v.state + ' ' + v.mode + ' ' + v.selectAll }" onclick="{!c.handleClick}">
		<thead>
			<tr>
				{!v.columns}
			</tr>
		</thead>
		<tbody>				
			<aura:iteration aura:id="iteration" 
							items="{!v.priv_rows}" 
							var="row" 
							indexVar="index" 
							body="{!v.rowTemplate}"
							rerenderComplete="{!c.handleRerenderComplete}"/>

			<!-- If a summary row exists, render it -->
			<aura:renderIf isTrue="{! v.priv_summaryRow.length > 0 }">
				<tr>{! v.priv_summaryRow }</tr>
			</aura:renderIf>
		</tbody>
	</table>	

</aura:component>

