<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extensible="true" description="A trigger that expands and collapses a menu, used in a ui:menu component." support="GA">

    <!-- Most of the attribtues and events defined here are copied from ui:visible and ui:interactive
         as a temporary fix for label access check in 204/patch. The real fix is in main.-->

    <!-- Library which holds the Aura events registration -->
    <aura:import library="ui:eventLib" property="lib"/>

    <!-- from ui:visible -->
    <aura:attribute name="class" type="String" access="GLOBAL" description="A CSS style to be attached to the component. This style is added in addition to base styles output by the component."/>
    <aura:attribute name="dir" type="String" default="ltr" description="The direction in which the component should be read. Possible values are &quot;rtl&quot; (right to left) and &quot;ltr&quot; (left to right). Default value is &quot;ltr&quot;."/>
    <!-- label access is changed to GLOBAL for ACF -->
    <aura:attribute name="label" type="String" access="GLOBAL" description="The text displayed on the component. In the rendered HTML output, where possible the label is associated with the HTML element to improve accessibility."/>
    <aura:attribute name="namespaceOverride" type="String" description="Overrides the namespace for this component with the supplied text."/>
    <aura:attribute name="actionable" type="Boolean" default="true" description="Specifies whether the component can have an action performed on it. For example, to control whether the component can be clicked."/>
    <aura:attribute name="role" type="String" description="Defines the component to help orient the user. Use this attribute for accessibility or component description. Possible values: header, main, note, and so on."/>
    <aura:attribute name="ariaDescribedBy" type="String" default="" description="Identifies the HTML element (or elements) that describes the component. Use this attribute for accessibility or component description."/>
    <aura:attribute name="value" access="PRIVILEGED" type="Object" description="References the controller class variable that is associated with the component."/>
    <aura:attribute name="visible" type="Boolean" default="true" description="Controls the visibility of the component."/>

    <aura:registerEvent name="click" type="ui:click" access="GLOBAL" description="The event fired when the user clicks on the component." />
    <aura:registerEvent name="dblclick" type="ui:dblclick" access="GLOBAL" description="The event fired when the user double-clicks the component."/>
    <aura:registerEvent name="mousedown" type="ui:mousedown" access="GLOBAL" description="The event fired when the user clicks a mouse button over the component."/>
    <aura:registerEvent name="mousemove" type="ui:mousemove" access="GLOBAL" description="The event fired when the user moves the mouse pointer over the component."/>
    <aura:registerEvent name="mouseout" type="ui:mouseout" access="GLOBAL" description="The event fired when the user moves the mouse pointer away from the component."/>
    <aura:registerEvent name="mouseover" type="ui:mouseover" access="GLOBAL" description="The event fired when the user moves the mouse pointer over the component."/>
    <aura:registerEvent name="mouseup" type="ui:mouseup" access="GLOBAL" description="The event fired when the user releases the mouse button over the component."/>

    <!-- from ui:interactive -->
    <aura:attribute name="disabled" type="Boolean" access="GLOBAL" default="false" description="Specifies whether the component should be displayed in a disabled state. Default value is &quot;false&quot;."/>
    <aura:attribute name="disableDoubleClicks" type="Boolean" default="false" description="Disables double clicking the component within 350ms"/>
    <aura:registerEvent name="blur" type="ui:blur" access="GLOBAL" description="The event fired when the user moves off from the component."/>
    <aura:registerEvent name="focus" type="ui:focus" access="GLOBAL" description="The event fired when the user focuses on the component."/>
    <aura:registerEvent name="keydown" type="ui:keydown" access="GLOBAL" description="The event fired when the user presses a keyboard key on the component."/>
    <aura:registerEvent name="keypress" type="ui:keypress" access="GLOBAL" description="The event fired when the user presses or holds down a keyboard key on the component."/>
    <aura:registerEvent name="keyup" type="ui:keyup" access="GLOBAL" description="The event fired when the user releases a keyboard key on the component."/>
    <aura:registerEvent name="select" type="ui:select" access="GLOBAL" description="The event fired when the user selects some text."/>

    <!-- ui:popupTrigger -->
    <aura:attribute name="title" type="String" access="GLOBAL" default="" description="The text to display as a tooltip when the mouse pointer hovers over this component."/>
    <aura:attribute name="trigger" type="Aura.Component[]" description="Used to override the default HTML and trigger event handling. If used, developer must trigger show/hide events for popup target since v.trigger is not wrapped in a link tag, it is wrapped in a plain div."/>
    <aura:attribute name="stopClickPropagation" type="Boolean" default="false" description="Prevents the click event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event."/>

    <aura:registerEvent name="popupTriggerPress" type="ui:popupTriggerPress" description="The event fired when a popup trigger is pressed."/>
    <aura:registerEvent name="popupTargetShow" type="ui:popupTargetShow" description="The trigger fires this event to show the target."/>
    <aura:registerEvent name="popupTargetHide" type="ui:popupTargetHide" description="The trigger fires this event to hide the target."/>
    <aura:registerEvent name="popupKeyboardEvent" type="ui:popupKeyboardEvent" description="The event fired when a user interacts with a popup via the keyboard."/>

    <aura:handler event="ui:popupTargetToggle" action="{!c.onPopupToggle}"/>
    <aura:method name="triggerInteraction"/>

    <aura:handler name="init" value="{!this}" action="{!c.init}"/>

    <div id="{!globalId}" aura:id="popupTrigger">
	    <aura:if isTrue="{!v.trigger.length > 0}">
	    	<div aura:id="popupTriggerElement">
	    		{!v.trigger}
	    	</div>

	    	<aura:set attribute="else">
	    		<a aura:id="popupTriggerElement" aria-haspopup="true" aria-disabled="{!v.disabled}" title="{!v.title}" class="{!v.class}"
                   tabindex="{!v.disabled ? -1: 0}" onclick="{!c.onClick}">

			    	<aura:if isTrue="{!v.label != null}">
			    		{!v.label}
			    		<aura:set attribute="else">
			    			{!v.body}
			    		</aura:set>
			    	</aura:if>
			    	<span class="assistiveText">{!v.title}</span>
		    	</a>
	    	</aura:set>
	    </aura:if>
	</div>
</aura:component>
