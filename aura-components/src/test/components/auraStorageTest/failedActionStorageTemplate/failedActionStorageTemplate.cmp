<aura:component isTemplate="true" extensible="true" extends="aura:template">

    <aura:set attribute="auraPreInitBlock">
        <script>
            // a storage adapter that fails on all operations
            var MockStorageAdapter = function MockStorageAdapter(config) {  this.name = config['name']; };
            MockStorageAdapter.NAME = "mock";
            MockStorageAdapter.prototype.getName = function() { return MockStorageAdapter.NAME; };
            MockStorageAdapter.prototype.isPersistent = function() { return true; };
            MockStorageAdapter.prototype.isSecure = function() { return true; };

            MockStorageAdapter.prototype.getSize = function() {
                return Promise.reject(new Error("getSize(): mock always fails"));
            };

            MockStorageAdapter.prototype.getItem = function(key) {
                return Promise.reject(new Error("getItem(): mock always fails"));
            };

            MockStorageAdapter.prototype.getAll = function(key) {
                return Promise.reject(new Error("getAll(): mock always fails"));
            };

            MockStorageAdapter.prototype.setItem = function(key, item) {
                return Promise.reject(new Error("setItem(): mock always fails"));
            };

            MockStorageAdapter.prototype.removeItem = function(key) {
                return Promise.reject(new Error("removeItem(): mock always fails"));
            };

            MockStorageAdapter.prototype.clear = function(key) {
                return Promise.reject(new Error("clear(): mock always fails"));
            };

            MockStorageAdapter.prototype.getExpired = function() {
                return Promise.reject(new Error("getExpired(): mock always fails"));
            };

            // register the mock adapter
            $A.storageService.registerAdapter({
                "name": MockStorageAdapter.NAME,
                "adapterClass": MockStorageAdapter,
                "secure": true,
                "persistent": true
            });

            // force test to select our mock adapter
            $A.installOverride("StorageService.selectAdapter", function(){ return MockStorageAdapter.NAME }, this);

            // create the magic "actions" store
            $A.storageService.initStorage({
                name: "actions",
                maxSize: 4096,
                expiration: 200,
                autoRefreshInterval: 300
            });
        </script>
    </aura:set>
</aura:component>
