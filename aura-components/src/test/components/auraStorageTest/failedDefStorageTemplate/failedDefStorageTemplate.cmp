<aura:component isTemplate="true" extensible="true" extends="aura:template">

    <aura:set attribute="auraPreInitBlock">
        <script>
            /*
             * Settings for the test to set and flags for the test to verify. By default this template will fail all
             * operations on the ComponentDefStorage. To fail specific adapter functions set failAll to false and
             * fail[FunctionName] to true.
             *
             * clearCallCount - Track how many times clear was called for tests to verify
             * failAll - Fail all storage operations with a rejected Promise. True by default.
             */
            window.mockComponentDefStorage = {
                clearCallCount : 0,
                failAll: true
            };

            // Some of the component def caching logic is bypassed without an actions cache
            $A.storageService.initStorage({
                name: "actions",
                persistent: true,
                secure: false,
                maxSize: 4096,
                expiration: 200,
                autoRefreshInterval: 300
            });

            // Create a functional storage to pass through to when we want operations to pass
            var realStorage = $A.storageService.initStorage({
                name: "ComponentDefStorageReal",
                persistent: true,
                secure: false,
                maxSize: 4096,
                expiration: 200
            });


            // A storage adapter that fails all operations by default and can be overriden to fail on specific methods
            var MockStorageAdapter = function MockStorageAdapter(config) {  this.name = config['name']; };
            MockStorageAdapter.NAME = "mockComponentDefStorage";
            MockStorageAdapter.prototype.getName = function() { return MockStorageAdapter.NAME; };
            MockStorageAdapter.prototype.isPersistent = function() { return true; };
            MockStorageAdapter.prototype.isSecure = function() { return true; };

            MockStorageAdapter.prototype.getSize = function() {
                if (window.mockComponentDefStorage.failAll || window.mockComponentDefStorage.failGetSize) {
                    return Promise.reject(new Error("getSize(): mock always fails"));
                }
                return realStorage.adapter.getSize.apply(realStorage.adapter, arguments);
            };

            MockStorageAdapter.prototype.getItems = function() {
                if (window.mockComponentDefStorage.failAll || window.mockComponentDefStorage.failGetItems) {
                    return Promise.reject(new Error("getItems(): mock always fails"));
                }
                return realStorage.adapter.getItems.apply(realStorage.adapter, arguments);
            };

            MockStorageAdapter.prototype.getAll = function() {
                if (window.mockComponentDefStorage.failAll || window.mockComponentDefStorage.failGetAll) {
                    return Promise.reject(new Error("getAll(): mock always fails"));
                }
                return realStorage.adapter.getAll.apply(realStorage.adapter, arguments);
            };

            MockStorageAdapter.prototype.setItems = function() {
                if (window.mockComponentDefStorage.failAll || window.mockComponentDefStorage.failSetItems) {
                    return Promise.reject(new Error("setItems(): mock always fails"));
                }
                return realStorage.adapter.setItems.apply(realStorage.adapter, arguments);
            };

            MockStorageAdapter.prototype.removeItems = function() {
                if (window.mockComponentDefStorage.failAll  || window.mockComponentDefStorage.failRemoveItems) {
                    return Promise.reject(new Error("removeItems(): mock always fails"));
                }
                return realStorage.adapter.removeItems.apply(realStorage.adapter, arguments);
            };

            MockStorageAdapter.prototype.clear = function() {
                window.mockComponentDefStorage.clearCallCount++;
                if (window.mockComponentDefStorage.failAll  || window.mockComponentDefStorage.failClear) {
                    return Promise.reject(new Error("clear(): mock always fails"));
                }
                return realStorage.adapter.clear.apply(realStorage.adapter, arguments);
            };

            MockStorageAdapter.prototype.sweep = function() {
                if (window.mockComponentDefStorage.failAll  || window.mockComponentDefStorage.failSweep) {
                    return Promise.reject(new Error("sweep(): mock always fails"));
                }
                return realStorage.adapter.sweep.apply(realStorage.adapter, arguments);
            };

            // Register the mock adapter
            $A.storageService.registerAdapter({
                "name": MockStorageAdapter.NAME,
                "adapterClass": MockStorageAdapter,
                "secure": true,
                "persistent": true
            });

            // Force test to select our mock adapter
            $A.installOverride("StorageService.selectAdapter", function(){ return MockStorageAdapter.NAME; }, this);

            $A.storageService.initStorage({
                name: "ComponentDefStorage",
                persistent: true,
                secure: true,
                maxSize: 4096,
                expiration: 200,
                debugLogging: true,
                clearOnInit: false
            });
        </script>
    </aura:set>
</aura:component>
