<aura:component isTemplate="true" extensible="true" extends="aura:template">

    <aura:set attribute="auraPreInitBlock">
        <script>
            // a global place so tests can inspect the adapter
            window.mockStorageAdapter = window.mockStorageAdapter || { getItemsInvocations: {} };

            // implement the simplest storage adapter so we can customize the behavior of getItem
            // for these tests.
            var MockStorageAdapter = function MockStorageAdapter(config) {  this.name = config['name']; };
            MockStorageAdapter.NAME = "mock";
            MockStorageAdapter.prototype.getName = function() { return MockStorageAdapter.NAME; };
            MockStorageAdapter.prototype.isPersistent = function() { return true; };
            MockStorageAdapter.prototype.isSecure = function() { return true; };

            MockStorageAdapter.prototype.getSize = function() {
                return new Promise(function(success, error) { success(0); });
            };

            MockStorageAdapter.prototype.getItems = function(keys) {
                return new Promise(function(success, error) {
                    // use setTimeout() to trigger a context switch. 1500 is chosen because it's
                    // long enough for aura to initialize if it's not correctly waiting for the callback.
                    setTimeout(function() {
                        var results = {};
                        var key, prefixlessKey;
                        for (var i = 0; keys &amp;&amp; i &lt; keys.length; i++) {
                            key = keys[i];

                            // strip AuraStorage.KEY_DELIMITER
                            prefixlessKey = key.slice(key.indexOf(":") + 1);

                            // record which keys had their callbacks invoked
                            window.mockStorageAdapter.getItemsInvocations[prefixlessKey] = true;

                            // return a well-known value for the GVP. this is tested in loadFromStorageTest.js.
                            if (prefixlessKey === "globalValueProviders") {
                                results[key] = {
                                    value: [{type:"$Custom", values:{foo:"bar"} }],
                                    expires: new Date().getTime()
                                };
                            }
                        }

                        success(results);
                    }, 1500);
                });
            };

            MockStorageAdapter.prototype.setItems = function(key, item) {
                return new Promise(function(success, error) { success(); });
            };

            MockStorageAdapter.prototype.removeItems = function(key) {
                return new Promise(function(success, error) { success(); });
            };

            MockStorageAdapter.prototype.clear = function(key) {
                return new Promise(function(success, error) { success(); });
            };

            MockStorageAdapter.prototype.getExpired = function() {
                return new Promise(function(success, error) { success([]); });
            };

            MockStorageAdapter.prototype.getAll = function() {
                return new Promise(function(success, error) { success({}); });
            };

            // register the mock adapter. must be persistent for GVP storage to be used.
            $A.storageService.registerAdapter({
                "name": MockStorageAdapter.NAME,
                "adapterClass": MockStorageAdapter,
                "secure": true,
                "persistent": true
            });

            // force test to select our mock adapter
            $A.installOverride("StorageService.selectAdapter", function(){ return MockStorageAdapter.NAME; }, this);

            // create the magic "actions" store
            $A.storageService.initStorage({name: "actions"});
        </script>
    </aura:set>
</aura:component>
