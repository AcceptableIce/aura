{
  "s":1,
  "v":{
    "xs":"P",
    "descriptor":"markup://fake:component",
    "superDef":{
      "s":2,
      "v":{
        "xs":"G",
        "descriptor":"markup://aura:component",
        "attributeDefs":[
          {
            "s":3,
            "v":{
              "name":"body",
              "type":"aura://Aura.Component[]",
              "xs":"G"
            }
          }
        ],
        "interfaces":[
          "markup://aura:rootComponent"
        ],
        "isAbstract":true,
        "componentClass":"function(){\n$A.componentService.addComponentClass(\"aura$component\", function() {\n    \n    var aura$component = function aura$component(config, localCreation, creatingPrototype) {\n        $A.Component.call(this, config, localCreation, creatingPrototype); \n    };\n    aura$component.prototype = new $A.Component(null, null, true);\n    aura$component.prototype.constructor = aura$component;\n\n    aura$component.Helper = function(){};\n            aura$component.prototype.helper = new aura$component.Helper();\n\n    aura$component.prototype.render = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var rendering = component.getRendering();\n        return rendering||$A.renderingService.renderFacet(component,component.get(\"v.body\"));\n    \n    };\n\n    aura$component.prototype.rerender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        return $A.renderingService.rerenderFacet(component,body);\n    \n    };\n\n    aura$component.prototype.afterRender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.afterRender(body);\n    \n    };\n\n    aura$component.prototype.unrender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.renderingService.unrenderFacet(component,body);\n    \n    };\n\n    \n    return aura$component;\n});\n\n\n}"
      }
    },
    "attributeDefs":[
      {
        "r":3
      }
    ],
    "componentClass":"function(){\n$A.componentService.addComponentClass(\"fake$component\", function() {\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n    var fake$component = function fake$component(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    fake$component.prototype = new aura$component(null, null, true);\n    fake$component.prototype.constructor = fake$component;\n\n    fake$component.Helper = aura$component.Helper;\n            fake$component.prototype.helper = new fake$component.Helper();\n\n    \n    return fake$component;\n});\n\n\n}"
  }
}