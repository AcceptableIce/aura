{
  "s":1,
  "v":{
    "descriptor":"markup://aura:test",
    "superDef":{
      "s":2,
      "v":{
        "descriptor":"markup://aura:application",
        "attributeDefs":[
          {
            "s":3,
            "v":{
              "name":"body",
              "type":"aura://Aura.Component[]"
            }
          }
        ],
        "interfaces":[
          "markup://aura:rootComponent"
        ],
        "isAbstract":true,
        "componentClass":"function(){\n$A.componentService.addComponentClass(\"aura$application\", function() {\n\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n\n    var aura$application = function aura$application(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    aura$application.prototype = new aura$component(null, null, true);\n    aura$application.prototype.constructor = aura$application;\n\n    aura$application.Helper = function() {};\n\n    aura$application.Helper.prototype = new aura$component.Helper();\n    aura$application.Helper.prototype.constructor = aura$application.Helper;\n    aura$application.prototype.helper = new aura$application.Helper();\n\n\n    aura$application.prototype.render = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var rendering = component.getRendering();\n        return rendering||$A.renderingService.renderFacet(component,component.get(\"v.body\"));\n    \n    };\n\n    aura$application.prototype.rerender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        return $A.renderingService.rerenderFacet(component,body);\n    \n    };\n\n    aura$application.prototype.afterRender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.afterRender(body);\n    \n    };\n\n    aura$application.prototype.unrender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.renderingService.unrenderFacet(component,body);\n    \n    };\n\n    \n\n    return aura$application;\n});\n\n\n}",
        "locationChangeEventDef":{
          "s":4,
          "v":{
            "descriptor":"markup://aura:locationChange",
            "type":"APPLICATION",
            "superDef":{
              "s":5,
              "v":{
                "descriptor":"markup://aura:applicationEvent",
                "type":"APPLICATION",
                "attributes":{

                },
                "xs":"G"
              }
            },
            "attributes":{
              "token":{
                "s":6,
                "v":{
                  "name":"token",
                  "type":"aura://String",
                  "xs":"G"
                }
              },
              "querystring":{
                "s":7,
                "v":{
                  "name":"querystring",
                  "type":"aura://String",
                  "xs":"G"
                }
              }
            },
            "xs":"G"
          }
        }
      }
    },
    "attributeDefs":[
      {
        "r":3
      },
      {
        "s":8,
        "v":{
          "name":"testAttributeDescriptorName",
          "type":"aura://String",
          "default":"testValue"
        }
      }
    ],
    "componentClass":"function(){\n$A.componentService.addComponentClass(\"aura$test\", function() {\n\n    \n    var aura$application = $A.componentService.getComponentClass(\"aura$application\");\n    \n\n    var aura$test = function aura$test(config, localCreation, creatingPrototype) {\n        aura$application.call(this, config, localCreation, creatingPrototype); \n    };\n    aura$test.prototype = new aura$application(null, null, true);\n    aura$test.prototype.constructor = aura$test;\n\n    aura$test.Helper = function() {};\n\n    aura$test.Helper.prototype = new aura$application.Helper();\n    aura$test.Helper.prototype.constructor = aura$test.Helper;\n    aura$test.prototype.helper = new aura$test.Helper();\n\n\n    aura$test.prototype.render = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.render() : undefined;\n            };\n        aura$test.prototype.rerender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.rerender() : undefined;\n            };\n        aura$test.prototype.afterRender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.afterRender() : undefined;\n            };\n        aura$test.prototype.unrender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.unrender() : undefined;\n            };\n        \n\n    return aura$test;\n});\n\n\n\n$A.componentService.addComponentClass(\"aura$application\", function() {\n\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n\n    var aura$application = function aura$application(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    aura$application.prototype = new aura$component(null, null, true);\n    aura$application.prototype.constructor = aura$application;\n\n    aura$application.Helper = function() {};\n\n    aura$application.Helper.prototype = new aura$component.Helper();\n    aura$application.Helper.prototype.constructor = aura$application.Helper;\n    aura$application.prototype.helper = new aura$application.Helper();\n\n\n    aura$application.prototype.render = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var rendering = component.getRendering();\n        return rendering||$A.renderingService.renderFacet(component,component.get(\"v.body\"));\n    \n    };\n\n    aura$application.prototype.rerender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        return $A.renderingService.rerenderFacet(component,body);\n    \n    };\n\n    aura$application.prototype.afterRender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.afterRender(body);\n    \n    };\n\n    aura$application.prototype.unrender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.renderingService.unrenderFacet(component,body);\n    \n    };\n\n    \n\n    return aura$application;\n});\n\n\n}",
    "locationChangeEventDef":{
      "r":4
    }
  }
}