{
  "serId":1,
  "value":{
    "descriptor":"markup://aura:test",
    "superDef":{
      "serId":2,
      "value":{
        "descriptor":"markup://aura:application",
        "rendererDef":{
          "serId":3,
          "value":{
            "descriptor":"js://aura.component",
            "render":
function(component) {
        var rendering = component.getRendering();
        return rendering||$A.renderingService.renderFacet(component,component.get("v.body"));
    },
            "afterRender":
function(component) {
        var body = component.get("v.body");
        $A.afterRender(body);
    },
            "rerender":
function(component) {
        var body = component.get("v.body");
        return $A.renderingService.rerenderFacet(component,body);
    },
            "unrender":
function(component) {
        var body = component.get("v.body");
        $A.renderingService.unrenderFacet(component,body);
    }
          }
        },
        "attributeDefs":[
          {
            "serId":4,
            "value":{
              "name":"body",
              "type":"aura://Aura.Component[]"
            }
          }
        ],
        "interfaces":[
          "markup://aura:rootComponent"
        ],
        "isAbstract":true,
        "componentClass":"function(){\n$A.componentService.addComponentClass(\"aura$application\", function() {\n\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n\n    var aura$application = function aura$application(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    aura$application.prototype = new aura$component(null, null, true);\n    aura$application.prototype.constructor = aura$application;\n\n    aura$application.Helper = function() {};\n\n    aura$application.Helper.prototype = new aura$component.Helper();\n    aura$application.Helper.prototype.constructor = aura$application.Helper;\n    aura$application.prototype.helper = new aura$application.Helper();\n\n\n    aura$application.prototype.render = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var rendering = component.getRendering();\n        return rendering||$A.renderingService.renderFacet(component,component.get(\"v.body\"));\n    \n    };\n\n    aura$application.prototype.rerender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        return $A.renderingService.rerenderFacet(component,body);\n    \n    };\n\n    aura$application.prototype.afterRender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.afterRender(body);\n    \n    };\n\n    aura$application.prototype.unrender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.renderingService.unrenderFacet(component,body);\n    \n    };\n\n    \n\n    $A.Component.registerMethods(aura$application);\n\n    return aura$application;\n});\n\n\n}",
        "locationChangeEventDef":{
          "serId":5,
          "value":{
            "descriptor":"markup://aura:locationChange",
            "type":"APPLICATION",
            "superDef":{
              "serId":6,
              "value":{
                "descriptor":"markup://aura:applicationEvent",
                "type":"APPLICATION",
                "attributes":{

                }
              }
            },
            "attributes":{
              "token":{
                "serId":7,
                "value":{
                  "name":"token",
                  "type":"aura://String"
                }
              },
              "querystring":{
                "serId":8,
                "value":{
                  "name":"querystring",
                  "type":"aura://String"
                }
              }
            }
          }
        }
      }
    },
    "attributeDefs":[
      {
        "serRefId":4
      },
      {
        "serId":9,
        "value":{
          "name":"testAttributeDescriptorName",
          "type":"aura://String",
          "default":"testValue"
        }
      }
    ],
    "componentClass":"function(){\n$A.componentService.addComponentClass(\"aura$test\", function() {\n\n    \n    var aura$application = $A.componentService.getComponentClass(\"aura$application\");\n    \n\n    var aura$test = function aura$test(config, localCreation, creatingPrototype) {\n        aura$application.call(this, config, localCreation, creatingPrototype); \n    };\n    aura$test.prototype = new aura$application(null, null, true);\n    aura$test.prototype.constructor = aura$test;\n\n    aura$test.Helper = function() {};\n\n    aura$test.Helper.prototype = new aura$application.Helper();\n    aura$test.Helper.prototype.constructor = aura$test.Helper;\n    aura$test.prototype.helper = new aura$test.Helper();\n\n\n    \n\n    $A.Component.registerMethods(aura$test);\n\n    return aura$test;\n});\n\n\n\n$A.componentService.addComponentClass(\"aura$application\", function() {\n\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n\n    var aura$application = function aura$application(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    aura$application.prototype = new aura$component(null, null, true);\n    aura$application.prototype.constructor = aura$application;\n\n    aura$application.Helper = function() {};\n\n    aura$application.Helper.prototype = new aura$component.Helper();\n    aura$application.Helper.prototype.constructor = aura$application.Helper;\n    aura$application.prototype.helper = new aura$application.Helper();\n\n\n    aura$application.prototype.render = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var rendering = component.getRendering();\n        return rendering||$A.renderingService.renderFacet(component,component.get(\"v.body\"));\n    \n    };\n\n    aura$application.prototype.rerender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        return $A.renderingService.rerenderFacet(component,body);\n    \n    };\n\n    aura$application.prototype.afterRender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.afterRender(body);\n    \n    };\n\n    aura$application.prototype.unrender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.renderingService.unrenderFacet(component,body);\n    \n    };\n\n    \n\n    $A.Component.registerMethods(aura$application);\n\n    return aura$application;\n});\n\n\n}",
    "locationChangeEventDef":{
      "serRefId":5
    }
  }
}