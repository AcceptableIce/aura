{
  "componentDef":{
    "s":1,
    "v":{
      "descriptor":"markup://test:text",
      "superDef":{
        "s":2,
        "v":{
          "xs":"G",
          "descriptor":"markup://aura:component",
          "attributeDefs":[
            {
              "s":3,
              "v":{
                "name":"body",
                "type":"aura://Aura.Component[]",
                "xs":"G"
              }
            }
          ],
          "interfaces":[
            "markup://aura:rootComponent"
          ],
          "isAbstract":true,
          "componentClass":"function(){\n$A.componentService.addComponentClass(\"aura$component\", function() {\n\n    \n\n    var aura$component = function aura$component(config, localCreation, creatingPrototype) {\n        $A.Component.call(this, config, localCreation, creatingPrototype); \n    };\n    aura$component.prototype = new $A.Component(null, null, true);\n    aura$component.prototype.constructor = aura$component;\n\n    aura$component.Helper = function() {};\n\n    aura$component.prototype.helper = new aura$component.Helper();\n\n\n    aura$component.prototype.render = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var rendering = component.getRendering();\n        return rendering||$A.renderingService.renderFacet(component,component.get(\"v.body\"));\n    \n    };\n\n    aura$component.prototype.rerender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        return $A.renderingService.rerenderFacet(component,body);\n    \n    };\n\n    aura$component.prototype.afterRender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.afterRender(body);\n    \n    };\n\n    aura$component.prototype.unrender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.renderingService.unrenderFacet(component,body);\n    \n    };\n\n    \n\n    return aura$component;\n});\n\n\n}"
        }
      },
      "attributeDefs":[
        {
          "r":3
        },
        {
          "s":4,
          "v":{
            "name":"value",
            "type":"aura://String"
          }
        }
      ],
      "facets":[
        {
          "descriptor":"body",
          "value":[
            {
              "componentDef":{
                "s":5,
                "v":{
                  "xs":"G",
                  "descriptor":"markup://aura:text",
                  "attributeDefs":[
                    {
                      "s":6,
                      "v":{
                        "name":"value",
                        "type":"aura://String",
                        "xs":"G"
                      }
                    },
                    {
                      "s":7,
                      "v":{
                        "name":"truncate",
                        "type":"aura://Integer"
                      }
                    },
                    {
                      "s":8,
                      "v":{
                        "name":"truncateByWord",
                        "type":"aura://Boolean",
                        "default":false
                      }
                    },
                    {
                      "s":9,
                      "v":{
                        "name":"ellipsis",
                        "type":"aura://Boolean",
                        "default":true
                      }
                    }
                  ],
                  "interfaces":[
                    "markup://aura:rootComponent"
                  ],
                  "componentClass":"function(){\n$A.componentService.addComponentClass(\"aura$text\", function() {\n\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n\n    var aura$text = function aura$text(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    aura$text.prototype = new aura$component(null, null, true);\n    aura$text.prototype.constructor = aura$text;\n\n    aura$text.Helper = function() {};\n\n    aura$text.Helper.prototype = new aura$component.Helper();\n    aura$text.Helper.prototype.constructor = aura$text.Helper;\n    aura$text.prototype.helper = new aura$text.Helper();\n\n\n    aura$text.prototype.render = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var value = component.get(\"v.value\");\n        \n        var trunc = component.get(\"v.truncate\");\n        var truncateByWord = $A.util.getBooleanValue(component.get(\"v.truncateByWord\"));\n        var ellipsis = $A.util.getBooleanValue(component.get(\"v.ellipsis\"));\n        \n        if(trunc){\n            trunc = 1 * trunc;\n            value = aura.util.truncate(value, trunc, ellipsis, truncateByWord);\n        }\n        return [document.createTextNode($A.util.isUndefinedOrNull(value)?'':value)];\n    \n    };\n\n    aura$text.prototype.rerender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var element=component.getElement();\n        \n        if (element && element.parentNode) {\n        \tvar textValue = component.get(\"v.value\");\n            textValue = $A.util.isUndefinedOrNull(textValue) ? '' : textValue;\n            \n            if (element.nodeValue !== textValue) {\n                element.nodeValue = textValue;\n            }\n        }\n    \n    };\n\n    aura$text.prototype.afterRender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.afterRender() : undefined;\n            };\n        aura$text.prototype.unrender = function() {\n                var elements = this.getElements();\n                if(elements) {\n                    while(elements.length){\n                        $A.util.removeElement(elements.pop());\n                    }\n                }\n                this.disassociateElements();\n            };\n        \n\n    return aura$text;\n});\n\n\n}"
                }
              },
              "attributes":{
                "values":{
                  "value":{
                    "descriptor":"value",
                    "value":"\n    First Text\n    "
                  }
                }
              }
            },
            {
              "componentDef":{
                "s":10,
                "v":{
                  "descriptor":"markup://test:parent",
                  "styleDef":{
                    "s":11,
                    "v":{
                      "descriptor":"css://test.parent",
                      "code":"",
                      "className":"testParent"
                    }
                  },
                  "superDef":{
                    "r":2
                  },
                  "attributeDefs":[
                    {
                      "r":3
                    }
                  ],
                  "facets":[
                    {
                      "descriptor":"body",
                      "value":[
                        {
                          "componentDef":{
                            "s":12,
                            "v":{
                              "descriptor":"markup://test:child1",
                              "modelDef":{
                                "s":13,
                                "v":{
                                  "descriptor":"java://test.model.TestReinitializeModel",
                                  "members":[
                                    {
                                      "s":14,
                                      "v":{
                                        "name":"itemList",
                                        "type":"java://java.util.ArrayList"
                                      }
                                    },
                                    {
                                      "s":15,
                                      "v":{
                                        "name":"value",
                                        "type":"java://java.lang.String"
                                      }
                                    },
                                    {
                                      "s":16,
                                      "v":{
                                        "name":"valueParent",
                                        "type":"java://java.lang.String"
                                      }
                                    }
                                  ]
                                }
                              },
                              "superDef":{
                                "r":2
                              },
                              "attributeDefs":[
                                {
                                  "r":3
                                },
                                {
                                  "s":17,
                                  "v":{
                                    "name":"attr",
                                    "type":"aura://String"
                                  }
                                }
                              ],
                              "facets":[
                                {
                                  "descriptor":"body",
                                  "value":[
                                    {
                                      "componentDef":{
                                        "s":18,
                                        "v":{
                                          "xs":"G",
                                          "descriptor":"markup://aura:expression",
                                          "attributeDefs":[
                                            {
                                              "s":19,
                                              "v":{
                                                "name":"value",
                                                "type":"aura://String",
                                                "xs":"G"
                                              }
                                            }
                                          ],
                                          "interfaces":[
                                            "markup://aura:rootComponent"
                                          ],
                                          "componentClass":"function(){\n$A.componentService.addComponentClass(\"aura$expression\", function() {\n\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n\n    var aura$expression = function aura$expression(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    aura$expression.prototype = new aura$component(null, null, true);\n    aura$expression.prototype.constructor = aura$expression;\n\n    aura$expression.Helper = function() {};\n\n    aura$expression.Helper.prototype = new aura$component.Helper();\n    aura$expression.Helper.prototype.constructor = aura$expression.Helper;\n    aura$expression.prototype.helper = new aura$expression.Helper();\n\n\n    aura$expression.prototype.render = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        var helper = renderable.helper;\n        \n\t\tvar value = component.get(\"v.value\");\n        if($A.util.isUndefinedOrNull(value)){\n            value = \"\";\n        }\n        if(!($A.util.isComponent(value)||$A.util.isArray(value))){\n            \n            component._lastRenderedValue=value=$A.newCmp({componentDef:'aura:text', attributes:{values:{value:value}}});\n        }\n        return $A.renderingService.renderFacet(component,value);\n\t\n    };\n\n    aura$expression.prototype.rerender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        var helper = renderable.helper;\n        \n        var ret=[];\n\t\tif (component.isRendered()) {\n            var value = component.get(\"v.value\");\n            if(!($A.util.isComponent(value)||$A.util.isArray(value))){\n                if($A.util.isUndefinedOrNull(value)){\n                    value = \"\";\n                }\n                if(component._lastRenderedValue && component._lastRenderedValue.isValid()){\n                    \n                    component._lastRenderedValue.set(\"v.value\",value,true);\n                    value=component._lastRenderedValue;\n                    return $A.rerender(value);\n                }else {\n                    value = $A.newCmp({componentDef: 'aura:text', attributes: {values: {value: value}}});\n                }\n            }\n            ret=$A.renderingService.rerenderFacet(component, value);\n        }\n        return ret;\n    \n    };\n\n    aura$expression.prototype.afterRender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        var helper = renderable.helper;\n        \n\t\tvar value = component.get(\"v.value\");\n\t\tif ($A.util.isComponent(value)||$A.util.isArray(value)) {\n\t\t\t$A.afterRender(value);\n\t\t}\n\t\n    };\n\n    aura$expression.prototype.unrender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        var helper = renderable.helper;\n        \n        $A.renderingService.unrenderFacet(component);\n        if (component._lastRenderedValue) {\n            component._lastRenderedValue.destroy();\n            component._lastRenderedValue = null;\n        }\n\t\n    };\n\n    \n\n    return aura$expression;\n});\n\n\n}"
                                        }
                                      },
                                      "attributes":{
                                        "values":{
                                          "value":{
                                            "descriptor":"value",
                                            "value":"{!m.value}"
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "componentDef":{
                                        "s":20,
                                        "v":{
                                          "descriptor":"markup://test:child2",
                                          "superDef":{
                                            "r":2
                                          },
                                          "attributeDefs":[
                                            {
                                              "r":3
                                            }
                                          ],
                                          "componentClass":"function(){\n$A.componentService.addComponentClass(\"test$child2\", function() {\n\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n\n    var test$child2 = function test$child2(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    test$child2.prototype = new aura$component(null, null, true);\n    test$child2.prototype.constructor = test$child2;\n\n    test$child2.Helper = function() {};\n\n    test$child2.Helper.prototype = new aura$component.Helper();\n    test$child2.Helper.prototype.constructor = test$child2.Helper;\n    test$child2.prototype.helper = new test$child2.Helper();\n\n\n    test$child2.prototype.render = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.render() : undefined;\n            };\n        test$child2.prototype.rerender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.rerender() : undefined;\n            };\n        test$child2.prototype.afterRender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.afterRender() : undefined;\n            };\n        test$child2.prototype.unrender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.unrender() : undefined;\n            };\n        \n\n    return test$child2;\n});\n\n\n}"
                                        }
                                      }
                                    }
                                  ]
                                }
                              ],
                              "hasServerDeps":true,
                              "componentClass":"function(){\n$A.componentService.addComponentClass(\"test$child1\", function() {\n\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n\n    var test$child1 = function test$child1(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    test$child1.prototype = new aura$component(null, null, true);\n    test$child1.prototype.constructor = test$child1;\n\n    test$child1.Helper = function() {};\n\n    test$child1.Helper.prototype = new aura$component.Helper();\n    test$child1.Helper.prototype.constructor = test$child1.Helper;\n    test$child1.prototype.helper = new test$child1.Helper();\n\n\n    test$child1.prototype.render = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.render() : undefined;\n            };\n        test$child1.prototype.rerender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.rerender() : undefined;\n            };\n        test$child1.prototype.afterRender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.afterRender() : undefined;\n            };\n        test$child1.prototype.unrender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.unrender() : undefined;\n            };\n        \n\n    return test$child1;\n});\n\n\n}"
                            }
                          },
                          "attributes":{
                            "values":{
                              "attr":{
                                "descriptor":"attr",
                                "value":"an attribute value"
                              }
                            }
                          }
                        }
                      ]
                    }
                  ],
                  "componentClass":"function(){\n$A.componentService.addComponentClass(\"test$parent\", function() {\n\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n\n    var test$parent = function test$parent(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    test$parent.prototype = new aura$component(null, null, true);\n    test$parent.prototype.constructor = test$parent;\n\n    test$parent.Helper = function() {};\n\n    test$parent.Helper.prototype = new aura$component.Helper();\n    test$parent.Helper.prototype.constructor = test$parent.Helper;\n    test$parent.prototype.helper = new test$parent.Helper();\n\n\n    test$parent.prototype.render = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.render() : undefined;\n            };\n        test$parent.prototype.rerender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.rerender() : undefined;\n            };\n        test$parent.prototype.afterRender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.afterRender() : undefined;\n            };\n        test$parent.prototype.unrender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.unrender() : undefined;\n            };\n        \n\n    return test$parent;\n});\n\n\n}"
                }
              }
            },
            {
              "componentDef":{
                "r":5
              },
              "attributes":{
                "values":{
                  "value":{
                    "descriptor":"value",
                    "value":"\n        Second Text\n\n        Third Text\n    "
                  }
                }
              }
            },
            {
              "componentDef":{
                "r":10
              },
              "attributes":{
                "values":{
                  "body":{
                    "descriptor":"body",
                    "value":[
                      {
                        "componentDef":{
                          "r":5
                        },
                        "attributes":{
                          "values":{
                            "value":{
                              "descriptor":"value",
                              "value":"\n        yo\n    "
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "componentDef":{
                "r":5
              },
              "attributes":{
                "values":{
                  "value":{
                    "descriptor":"value",
                    "value":"\n    Fourth Text\n"
                  }
                }
              }
            }
          ]
        }
      ],
      "componentClass":"function(){\n$A.componentService.addComponentClass(\"test$text\", function() {\n\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n\n    var test$text = function test$text(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    test$text.prototype = new aura$component(null, null, true);\n    test$text.prototype.constructor = test$text;\n\n    test$text.Helper = function() {};\n\n    test$text.Helper.prototype = new aura$component.Helper();\n    test$text.Helper.prototype.constructor = test$text.Helper;\n    test$text.prototype.helper = new test$text.Helper();\n\n\n    test$text.prototype.render = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.render() : undefined;\n            };\n        test$text.prototype.rerender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.rerender() : undefined;\n            };\n        test$text.prototype.afterRender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.afterRender() : undefined;\n            };\n        test$text.prototype.unrender = function() {\n                var zuper = this.getSuper();\n                return zuper ? zuper.unrender() : undefined;\n            };\n        \n\n    return test$text;\n});\n\n\n}"
    }
  },
  "attributes":{
    "values":{
      "body":{
        "descriptor":"body",
        "value":[
          {
            "componentDef":{
              "r":1
            }
          }
        ]
      }
    }
  }
}