{
  "componentDef":{
    "serId":1,
    "value":{
      "descriptor":"markup://test:flavorableFakeComponent",
      "superDef":{
        "serId":2,
        "value":{
          "descriptor":"markup://aura:component",
          "rendererDef":{
            "serId":3,
            "value":{
              "descriptor":"js://aura.component",
              "render":
function(component) {
        var rendering = component.getRendering();
        return rendering||$A.renderingService.renderFacet(component,component.get("v.body"));
    },
              "afterRender":
function(component) {
        var body = component.get("v.body");
        $A.afterRender(body);
    },
              "rerender":
function(component) {
        var body = component.get("v.body");
        return $A.renderingService.rerenderFacet(component,body);
    },
              "unrender":
function(component) {
        var body = component.get("v.body");
        $A.renderingService.unrenderFacet(component,body);
    }
            }
          },
          "attributeDefs":[
            {
              "serId":4,
              "value":{
                "name":"body",
                "type":"aura://Aura.Component[]"
              }
            }
          ],
          "interfaces":[
            "markup://aura:rootComponent"
          ],
          "isAbstract":true,
          "componentClass":"function(){\n$A.componentService.addComponentClass(\"aura$component\", function() {\n\n    \n\n    var aura$component = function aura$component(config, localCreation, creatingPrototype) {\n        $A.Component.call(this, config, localCreation, creatingPrototype); \n    };\n    aura$component.prototype = new $A.Component(null, null, true);\n    aura$component.prototype.constructor = aura$component;\n\n    aura$component.Helper = function() {};\n\n    aura$component.prototype.helper = new aura$component.Helper();\n\n\n    aura$component.prototype.render = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var rendering = component.getRendering();\n        return rendering||$A.renderingService.renderFacet(component,component.get(\"v.body\"));\n    \n    };\n\n    aura$component.prototype.rerender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        return $A.renderingService.rerenderFacet(component,body);\n    \n    };\n\n    aura$component.prototype.afterRender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.afterRender(body);\n    \n    };\n\n    aura$component.prototype.unrender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var body = component.get(\"v.body\");\n        $A.renderingService.unrenderFacet(component,body);\n    \n    };\n\n    \n\n    $A.Component.registerMethods(aura$component);\n\n    return aura$component;\n});\n\n\n}"
        }
      },
      "attributeDefs":[
        {
          "serRefId":4
        }
      ],
      "facets":[
        {
          "descriptor":"body",
          "value":[
            {
              "componentDef":{
                "serId":5,
                "value":{
                  "descriptor":"markup://aura:html",
                  "rendererDef":{
                    "serId":6,
                    "value":{
                      "descriptor":"js://aura.html",
                      "render":
function(component, helper) {
		var tag = component.get("v.tag");
		if ($A.util.isUndefinedOrNull(tag)) {
			$A.error("Undefined tag attribute for " + component.getGlobalId());
		}

        var element;
		var HTMLAttributes = component.get("v.HTMLAttributes");

		
		
		if ($A.get("$Browser.isIE7") && tag == "input") {
            var value = HTMLAttributes["name"];
			if ($A.util.isEmpty(value)) {
				element = document.createElement(tag);
			} else {
				element = document.createElement('<input name="' + value + '">');
			}
		} else {
			element = document.createElement(tag);
		}

		for ( var attribute in HTMLAttributes) {
			helper.createHtmlAttribute(component, element, attribute, HTMLAttributes[attribute]);
		}

		if (element.tagName === "A" && !element.getAttribute("href")) {
            element.setAttribute("href", "javascript:void(0);");
		}

		if (helper.canHaveBody(component)) {
            var body=component.get("v.body");
            $A.renderingService.renderFacet(component,body,element);
			
		}

		return element;
	},
                      "afterRender":
function(component, helper) {
		if (helper.canHaveBody(component)) {
			$A.afterRender(component.get("v.body"));
		}
	},
                      "rerender":
function(component, helper) {
		var element = component.getElement(),
			htmlAttr = "v.HTMLAttributes";

		if (!element) {
			return;
		}
		
		var skipMap = {
			"height" : true,
			"width" : true,
			"class" : true
		};

		var HTMLAttributes = component.get(htmlAttr);
		if (HTMLAttributes) {
			for (var name in HTMLAttributes) {
				var lowerName = name.toLowerCase();
				if (skipMap[lowerName] || lowerName.indexOf("on") == 0) {
					continue;
				}
				
				var value = HTMLAttributes[name];
				if ($A.util.isExpression(value)) {
					value = value.evaluate();
				}
				
				if (helper.SPECIAL_BOOLEANS.hasOwnProperty(lowerName)) {
					value = $A.util.getBooleanValue(value);
				}
	
				var oldValue = element[helper.caseAttribute(lowerName)];
				if (value !== oldValue) {
					helper.createHtmlAttribute(component, element, lowerName, value);
				    if($A.util.isExpression(oldValue)){
                        oldValue.removeChangeHandler(component,"HTMLAttributes."+name);
                    }
                }
			}
	
			var className = HTMLAttributes["class"];
			if ($A.util.isExpression(className)) {
                 className = className.evaluate();
             }

            if($A.util.isUndefinedOrNull(className)){
 				className='';
            }
			
			if (!$A.util.isUndefinedOrNull(element.auraClass)) {
				className += (" " + element.auraClass);
			}
			
			if (element["className"] !== className) {
				element["className"] = className;
			}
		}
		
		if (element.tagName ==="A" && !element.getAttribute("href")) {
			element.setAttribute("href", "javascript:void(0);");
		}

		if (helper.canHaveBody(component)) {
            $A.renderingService.rerenderFacet(component,component.get("v.body"),element);
		}
	},
                      "unrender":
function(component, helper) {
		
		$A.renderingService.unrenderFacet(component, component.get("v.body"));
	}
                    }
                  },
                  "attributeDefs":[
                    {
                      "serId":7,
                      "value":{
                        "name":"body",
                        "type":"aura://Aura.Component[]"
                      }
                    },
                    {
                      "serId":8,
                      "value":{
                        "name":"tag",
                        "type":"aura://String"
                      }
                    },
                    {
                      "serId":9,
                      "value":{
                        "name":"HTMLAttributes",
                        "type":"aura://Map"
                      }
                    }
                  ],
                  "interfaces":[
                    "markup://aura:rootComponent"
                  ],
                  "componentClass":"function(){\n$A.componentService.addComponentClass(\"aura$html\", function() {\n\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n\n    var aura$html = function aura$html(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    aura$html.prototype = new aura$component(null, null, true);\n    aura$html.prototype.constructor = aura$html;\n\n    aura$html.Helper = function() {};\n\n    aura$html.Helper.prototype = new aura$component.Helper();\n    aura$html.Helper.prototype.constructor = aura$html.Helper;\n    aura$html.Helper.prototype.addNamedClickHandler = function(element, handler, handlerName) {\n        var previousHandler = element[handlerName];\n        if ($A.util.isFunction(previousHandler)) {\n            $A.util.removeOn(element, \"click\", previousHandler);\n        }\n\n        $A.util.on(element, \"click\", handler);\n\n        element[handlerName] = handler;\n        return previousHandler;\n    };\n\n    aura$html.Helper.prototype.BODYLESS_TAGS = {\"hr\":true,\"col\":true,\"keygen\":true,\"param\":true,\"link\":true,\"track\":true,\"img\":true,\"br\":true,\"embed\":true,\"meta\":true,\"input\":true,\"area\":true,\"source\":true,\"command\":true,\"base\":true,\"wbr\":true};\n\n    aura$html.Helper.prototype.caseAttribute = function(attribute) {\n        return this.SPECIAL_CASINGS[attribute] || attribute;\n    };\n\n    aura$html.Helper.prototype.SPECIAL_BOOLEANS = {\"autocomplete\":true,\"noresize\":true,\"noshade\":true,\"declare\":true,\"defer\":true,\"selected\":true,\"ismap\":true,\"compact\":true,\"nowrap\":true,\"required\":true,\"multiple\":true,\"checked\":true,\"readonly\":true,\"disabled\":true};\n\n    aura$html.Helper.prototype.SPECIAL_CASINGS = {\"frameborder\":\"frameBorder\",\"colspan\":\"colSpan\",\"maxlength\":\"maxLength\",\"usemap\":\"useMap\",\"for\":\"htmlFor\",\"tabindex\":\"tabIndex\",\"class\":\"className\",\"rowspan\":\"rowSpan\",\"readonly\":\"readOnly\",\"bgcolor\":\"bgColor\",\"accesskey\":\"accessKey\"};\n\n    aura$html.Helper.prototype.createHtmlAttribute = function(component, element, name, attribute) {\n        var value;\n        var lowerName = name.toLowerCase();\n\n        \n        if (lowerName.indexOf(\"on\") === 0) {\n            var eventName = lowerName.substring(2);\n            if (eventName === \"click\") {\n                this.addNamedClickHandler(element, this.domEventHandler, this.NAMES.domHandler);\n            } else {\n                $A.util.on(element, eventName, this.domEventHandler);\n            }\n        } else {\n            var isSpecialBoolean = this.SPECIAL_BOOLEANS.hasOwnProperty(lowerName);\n            if (aura.util.isExpression(attribute)) {\n                attribute.addChangeHandler(component, \"HTMLAttributes.\" + name);\n                value = attribute.evaluate();\n            } else {\n                value = attribute;\n            }\n\n            if (isSpecialBoolean) {\n                value = $A.util.getBooleanValue(value);\n            }\n\n            var isString = $A.util.isString(value);\n            if (isString && value.indexOf(\"/auraFW\") === 0) {\n                \n                value = $A.getContext().getContextPath() + value;\n            }\n\n            var isHash = isString && value.indexOf(\"#\") === 0;\n            if (lowerName === \"href\" && element.tagName === \"A\" && value && (isHash || $A.util.supportsTouchEvents())) {\n                var HTMLAttributes = component.get(\"v.HTMLAttributes\");\n                var target = HTMLAttributes[\"target\"];\n                if (aura.util.isExpression(target)) {\n                    target = target.evaluate();\n                }\n                this.addNamedClickHandler(element, function () {\n                    if (isHash) {\n                        $A.run(function () {\n                            $A.historyService.set(value.substring(1));\n                        })\n                    } else {\n                        \n                        \n                        window.open(value, target ? target : \"_self\");\n                    }\n                }, this.NAMES.hashHandler);\n\n                var href = \"javascript:void(0\";\n                if ($A.getContext().getMode() !== \"PROD\") {\n                    \n                    \n                    href += \"/*\" + value + \"\\u002A/\";\n                }\n                href += \");\";\n                element.setAttribute(\"href\", href);\n            } else if (lowerName === \"role\" || lowerName.lastIndexOf(\"aria-\", 0) === 0) {\n                \n                element.setAttribute(name, value);\n            } else if (isSpecialBoolean) {\n                \n                var casedName = this.caseAttribute(lowerName);\n                if (value === false) {\n                    element.removeAttribute(casedName);\n                    \n                    \n                    if (casedName === \"checked\") {\n                        element.removeAttribute(\"defaultChecked\");\n                    }\n                } else {\n                    element.setAttribute(casedName, name);\n\n                    \n                    if (casedName === \"checked\") {\n                        element.setAttribute(\"defaultChecked\", true);\n                    }\n                }\n                \n                \n                \n                if($A.util.isUndefinedOrNull(value)){\n                    value='';\n                }\n                element[casedName] = value;\n            } else {\n\n                \n                \n                \n                \n                \n                if ($A.util.isIE && element.tagName === \"INPUT\" && lowerName === \"type\") {\n                    try { element.setAttribute(\"type\", value); }\n                    catch(e){}\n                }\n                \n                \n                \n                \n                else if (!aura.util.isUndefined(value) && !($A.util.isIE && element.tagName === \"INPUT\" && lowerName === \"value\" && value === null)) {\n                    var casedAttribute = this.caseAttribute(lowerName);\n                    var lowerName = name.toLowerCase();\n                    if (lowerName === \"style\" && $A.util.isIE) {\n                        element.style.cssText = value;\n                    } else if (lowerName === \"type\" || lowerName === \"href\" || lowerName === \"style\" || lowerName.indexOf(\"data-\") === 0) {\n                        \n                        element.setAttribute(casedAttribute, value);\n                    } else {\n                        if ($A.util.isUndefinedOrNull(value)) {\n                            value = '';\n                        }\n                        element[casedAttribute] = value;\n                    }\n                }\n            }\n        }\n    };\n\n    aura$html.Helper.prototype.canHaveBody = function(component) {\n        var tag = component.get(\"v.tag\");\n        if ($A.util.isUndefinedOrNull(tag)) {\n            $A.error(\"Undefined tag attribute for \" + component.getGlobalId());\n            return true;\n        }\n        return !this.BODYLESS_TAGS[tag.toLowerCase()];\n    };\n\n    aura$html.Helper.prototype.NAMES = {\"domHandler\":\"fcDomHandler\",\"hashHandler\":\"fcHashHandler\"};\n\n    aura$html.Helper.prototype.domEventHandler = function(event) {\n        var eventName = \"on\" + event.type,\n            element = event.currentTarget,\n            ownerComponent = $A.componentService.getRenderingComponentForElement(element),\n            htmlAttributes = ownerComponent.get(\"v.HTMLAttributes\"),\n            valueExpression = htmlAttributes[eventName],\n            onclickExpression;\n\n        if (eventName === 'ontouchend' || eventName === 'onpointerup' || eventName === 'onMSPointerUp') {\n            \n            onclickExpression = htmlAttributes[\"onclick\"];\n            if (!$A.util.isEmpty(onclickExpression)) {\n                if ($A.util.isEmpty(valueExpression)) {\n                    \n                    valueExpression = onclickExpression;\n                }\n            }\n        }\n\n        if ($A.util.isExpression(valueExpression)) {\n            $A.run(function () {\n                var action = valueExpression.evaluate();\n                action.runDeprecated(event);\n            });\n        }\n    };\n\n    aura$html.prototype.helper = new aura$html.Helper();\n\n\n    aura$html.prototype.render = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        var helper = renderable.helper;\n        \n\t\tvar tag = component.get(\"v.tag\");\n\t\tif ($A.util.isUndefinedOrNull(tag)) {\n\t\t\t$A.error(\"Undefined tag attribute for \" + component.getGlobalId());\n\t\t}\n\n        var element;\n\t\tvar HTMLAttributes = component.get(\"v.HTMLAttributes\");\n\n\t\t\n\t\t\n\t\tif ($A.get(\"$Browser.isIE7\") && tag == \"input\") {\n            var value = HTMLAttributes[\"name\"];\n\t\t\tif ($A.util.isEmpty(value)) {\n\t\t\t\telement = document.createElement(tag);\n\t\t\t} else {\n\t\t\t\telement = document.createElement('\u003Cinput name=\"' + value + '\"\u003E');\n\t\t\t}\n\t\t} else {\n\t\t\telement = document.createElement(tag);\n\t\t}\n\n\t\tfor ( var attribute in HTMLAttributes) {\n\t\t\thelper.createHtmlAttribute(component, element, attribute, HTMLAttributes[attribute]);\n\t\t}\n\n\t\tif (element.tagName === \"A\" && !element.getAttribute(\"href\")) {\n            element.setAttribute(\"href\", \"javascript:void(0);\");\n\t\t}\n\n\t\tif (helper.canHaveBody(component)) {\n            var body=component.get(\"v.body\");\n            $A.renderingService.renderFacet(component,body,element);\n\t\t\t\n\t\t}\n\n\t\treturn element;\n\t\n    };\n\n    aura$html.prototype.rerender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        var helper = renderable.helper;\n        \n\t\tvar element = component.getElement(),\n\t\t\thtmlAttr = \"v.HTMLAttributes\";\n\n\t\tif (!element) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar skipMap = {\n\t\t\t\"height\" : true,\n\t\t\t\"width\" : true,\n\t\t\t\"class\" : true\n\t\t};\n\n\t\tvar HTMLAttributes = component.get(htmlAttr);\n\t\tif (HTMLAttributes) {\n\t\t\tfor (var name in HTMLAttributes) {\n\t\t\t\tvar lowerName = name.toLowerCase();\n\t\t\t\tif (skipMap[lowerName] || lowerName.indexOf(\"on\") == 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar value = HTMLAttributes[name];\n\t\t\t\tif ($A.util.isExpression(value)) {\n\t\t\t\t\tvalue = value.evaluate();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (helper.SPECIAL_BOOLEANS.hasOwnProperty(lowerName)) {\n\t\t\t\t\tvalue = $A.util.getBooleanValue(value);\n\t\t\t\t}\n\t\n\t\t\t\tvar oldValue = element[helper.caseAttribute(lowerName)];\n\t\t\t\tif (value !== oldValue) {\n\t\t\t\t\thelper.createHtmlAttribute(component, element, lowerName, value);\n\t\t\t\t    if($A.util.isExpression(oldValue)){\n                        oldValue.removeChangeHandler(component,\"HTMLAttributes.\"+name);\n                    }\n                }\n\t\t\t}\n\t\n\t\t\tvar className = HTMLAttributes[\"class\"];\n\t\t\tif ($A.util.isExpression(className)) {\n                 className = className.evaluate();\n             }\n\n            if($A.util.isUndefinedOrNull(className)){\n \t\t\t\tclassName='';\n            }\n\t\t\t\n\t\t\tif (!$A.util.isUndefinedOrNull(element.auraClass)) {\n\t\t\t\tclassName += (\" \" + element.auraClass);\n\t\t\t}\n\t\t\t\n\t\t\tif (element[\"className\"] !== className) {\n\t\t\t\telement[\"className\"] = className;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (element.tagName ===\"A\" && !element.getAttribute(\"href\")) {\n\t\t\telement.setAttribute(\"href\", \"javascript:void(0);\");\n\t\t}\n\n\t\tif (helper.canHaveBody(component)) {\n            $A.renderingService.rerenderFacet(component,component.get(\"v.body\"),element);\n\t\t}\n\t\n    };\n\n    aura$html.prototype.afterRender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        var helper = renderable.helper;\n        \n\t\tif (helper.canHaveBody(component)) {\n\t\t\t$A.afterRender(component.get(\"v.body\"));\n\t\t}\n\t\n    };\n\n    aura$html.prototype.unrender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        var helper = renderable.helper;\n        \n\t\t\n\t\t$A.renderingService.unrenderFacet(component, component.get(\"v.body\"));\n\t\n    };\n\n    \n\n    $A.Component.registerMethods(aura$html);\n\n    return aura$html;\n});\n\n\n}"
                }
              },
              "flavorable":true,
              "attributes":{
                "values":{
                  "body":{
                    "descriptor":"body",
                    "value":[
                      {
                        "componentDef":{
                          "serId":10,
                          "value":{
                            "descriptor":"markup://aura:text",
                            "rendererDef":{
                              "serId":11,
                              "value":{
                                "descriptor":"js://aura.text",
                                "render":
function(component) {
        var value = component.get("v.value");
        
        var trunc = component.get("v.truncate");
        var truncateByWord = $A.util.getBooleanValue(component.get("v.truncateByWord"));
        var ellipsis = $A.util.getBooleanValue(component.get("v.ellipsis"));
        
        if(trunc){
            trunc = 1 * trunc;
            value = aura.util.truncate(value, trunc, ellipsis, truncateByWord);
        }
        return [document.createTextNode($A.util.isUndefinedOrNull(value)?'':value)];
    },
                                "rerender":
function(component) {
        var element=component.getElement();
        
        if (element && element.parentNode) {
        	var textValue = component.get("v.value");
            textValue = $A.util.isUndefinedOrNull(textValue) ? '' : textValue;
            
            if (element.nodeValue !== textValue) {
                element.nodeValue = textValue;
            }
        }
    }
                              }
                            },
                            "attributeDefs":[
                              {
                                "serId":12,
                                "value":{
                                  "name":"value",
                                  "type":"aura://String"
                                }
                              },
                              {
                                "serId":13,
                                "value":{
                                  "name":"truncate",
                                  "type":"aura://Integer"
                                }
                              },
                              {
                                "serId":14,
                                "value":{
                                  "name":"truncateByWord",
                                  "type":"aura://Boolean",
                                  "default":false
                                }
                              },
                              {
                                "serId":15,
                                "value":{
                                  "name":"ellipsis",
                                  "type":"aura://Boolean",
                                  "default":true
                                }
                              }
                            ],
                            "interfaces":[
                              "markup://aura:rootComponent"
                            ],
                            "componentClass":"function(){\n$A.componentService.addComponentClass(\"aura$text\", function() {\n\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n\n    var aura$text = function aura$text(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    aura$text.prototype = new aura$component(null, null, true);\n    aura$text.prototype.constructor = aura$text;\n\n    aura$text.Helper = function() {};\n\n    aura$text.Helper.prototype = new aura$component.Helper();\n    aura$text.Helper.prototype.constructor = aura$text.Helper;\n    aura$text.prototype.helper = new aura$text.Helper();\n\n\n    aura$text.prototype.render = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var value = component.get(\"v.value\");\n        \n        var trunc = component.get(\"v.truncate\");\n        var truncateByWord = $A.util.getBooleanValue(component.get(\"v.truncateByWord\"));\n        var ellipsis = $A.util.getBooleanValue(component.get(\"v.ellipsis\"));\n        \n        if(trunc){\n            trunc = 1 * trunc;\n            value = aura.util.truncate(value, trunc, ellipsis, truncateByWord);\n        }\n        return [document.createTextNode($A.util.isUndefinedOrNull(value)?'':value)];\n    \n    };\n\n    aura$text.prototype.rerender = function() {\n        var renderable = this.getRenderable();\n        var component = renderable;\n        \n        var element=component.getElement();\n        \n        if (element && element.parentNode) {\n        \tvar textValue = component.get(\"v.value\");\n            textValue = $A.util.isUndefinedOrNull(textValue) ? '' : textValue;\n            \n            if (element.nodeValue !== textValue) {\n                element.nodeValue = textValue;\n            }\n        }\n    \n    };\n\n    aura$text.prototype.afterRender = function() {\n        var zuper = this.getSuper();\n        return zuper ? zuper.afterRender() : undefined;\n    };\n    aura$text.prototype.unrender = function() {\n        var zuper = this.getSuper();\n        return zuper ? zuper.unrender() : undefined;\n    };\n    \n\n    $A.Component.registerMethods(aura$text);\n\n    return aura$text;\n});\n\n\n}"
                          }
                        },
                        "attributes":{
                          "values":{
                            "value":{
                              "descriptor":"value",
                              "value":"flavorableFakeComponent"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "HTMLAttributes":{
                    "descriptor":"HTMLAttributes",
                    "value":{

                    }
                  },
                  "tag":{
                    "descriptor":"tag",
                    "value":"div"
                  }
                }
              }
            }
          ]
        }
      ],
      "componentClass":"function(){\n$A.componentService.addComponentClass(\"test$flavorableFakeComponent\", function() {\n\n    \n    var aura$component = $A.componentService.getComponentClass(\"aura$component\");\n    \n\n    var test$flavorableFakeComponent = function test$flavorableFakeComponent(config, localCreation, creatingPrototype) {\n        aura$component.call(this, config, localCreation, creatingPrototype); \n    };\n    test$flavorableFakeComponent.prototype = new aura$component(null, null, true);\n    test$flavorableFakeComponent.prototype.constructor = test$flavorableFakeComponent;\n\n    test$flavorableFakeComponent.Helper = function() {};\n\n    test$flavorableFakeComponent.Helper.prototype = new aura$component.Helper();\n    test$flavorableFakeComponent.Helper.prototype.constructor = test$flavorableFakeComponent.Helper;\n    test$flavorableFakeComponent.prototype.helper = new test$flavorableFakeComponent.Helper();\n\n\n    test$flavorableFakeComponent.prototype.render = function() {\n        var zuper = this.getSuper();\n        return zuper ? zuper.render() : undefined;\n    };\n    test$flavorableFakeComponent.prototype.rerender = function() {\n        var zuper = this.getSuper();\n        return zuper ? zuper.rerender() : undefined;\n    };\n    test$flavorableFakeComponent.prototype.afterRender = function() {\n        var zuper = this.getSuper();\n        return zuper ? zuper.afterRender() : undefined;\n    };\n    test$flavorableFakeComponent.prototype.unrender = function() {\n        var zuper = this.getSuper();\n        return zuper ? zuper.unrender() : undefined;\n    };\n    \n\n    $A.Component.registerMethods(test$flavorableFakeComponent);\n\n    return test$flavorableFakeComponent;\n});\n\n\n}"
    }
  },
  "flavorName":"test"
}