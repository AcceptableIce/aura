{
  "componentDef":{
    "serId":1,
    "value":{
      "descriptor":"markup://test:flavorableFakeComponent",
      "superDef":{
        "serId":2,
        "value":{
          "descriptor":"markup://aura:component",
          "rendererDef":{
            "serId":3,
            "value":{
              "descriptor":"js://aura.component",
              "render":
function(component) {
        var rendering = component.getRendering();
        return rendering||$A.renderingService.renderFacet(component,component.get("v.body"));
    },
              "afterRender":
function(component) {
        var body = component.get("v.body");
        $A.afterRender(body);
    },
              "rerender":
function(component) {
        var body = component.get("v.body");
        return $A.renderingService.rerenderFacet(component,body);
    },
              "unrender":
function(component) {
        var body = component.get("v.body");
        $A.renderingService.unrenderFacet(component,body);
    }
            }
          },
          "attributeDefs":[
            {
              "serId":4,
              "value":{
                "name":"body",
                "type":"aura://Aura.Component[]"
              }
            }
          ],
          "interfaces":[
            "markup://aura:rootComponent"
          ],
          "isAbstract":true
        }
      },
      "attributeDefs":[
        {
          "serRefId":4
        }
      ],
      "facets":[
        {
          "descriptor":"body",
          "value":[
            {
              "componentDef":{
                "serId":5,
                "value":{
                  "descriptor":"markup://aura:html",
                  "rendererDef":{
                    "serId":6,
                    "value":{
                      "descriptor":"js://aura.html",
                      "render":
function(component, helper) {
		var tag = component.get("v.tag");
		if ($A.util.isUndefinedOrNull(tag)) {
			$A.error("Undefined tag attribute for " + component.getGlobalId());
		}

        var element;
		var HTMLAttributes = component.get("v.HTMLAttributes");

		
		
		if ($A.get("$Browser.isIE7") && tag == "input") {
            var value = HTMLAttributes["name"];
			if ($A.util.isEmpty(value)) {
				element = document.createElement(tag);
			} else {
				element = document.createElement('<input name="' + value + '">');
			}
		} else {
			element = document.createElement(tag);
		}

		for ( var attribute in HTMLAttributes) {
			helper.createHtmlAttribute(component, element, attribute, HTMLAttributes[attribute]);
		}

		if (element.tagName === "A" && !element.getAttribute("href")) {
            element.setAttribute("href", "javascript:void(0);");
		}

		if (helper.canHaveBody(component)) {
            var body=component.get("v.body");
            $A.renderingService.renderFacet(component,body,element);
			
		}

		return element;
	},
                      "afterRender":
function(component, helper) {
		if (helper.canHaveBody(component)) {
			$A.afterRender(component.get("v.body"));
		}
	},
                      "rerender":
function(component, helper) {
		var element = component.getElement(),
			htmlAttr = "v.HTMLAttributes";

		if (!element) {
			return;
		}
		
		var skipMap = {
			"height" : true,
			"width" : true,
			"class" : true
		};

		var HTMLAttributes = component.get(htmlAttr);
		if (HTMLAttributes) {
			for (var name in HTMLAttributes) {
				var lowerName = name.toLowerCase();
				if (skipMap[lowerName] || lowerName.indexOf("on") == 0) {
					continue;
				}
				
				var value = HTMLAttributes[name];
				if ($A.util.isExpression(value)) {
					value = value.evaluate();
				}
				
				if (helper.SPECIAL_BOOLEANS.hasOwnProperty(lowerName)) {
					value = $A.util.getBooleanValue(value);
				}
	
				var oldValue = element[helper.caseAttribute(lowerName)];
				if (value !== oldValue) {
					helper.createHtmlAttribute(component, element, lowerName, value);
				    if($A.util.isExpression(oldValue)){
                        oldValue.removeChangeHandler(component,"HTMLAttributes."+name);
                    }
                }
			}
	
			var className = HTMLAttributes["class"];
			if ($A.util.isExpression(className)) {
                 className = className.evaluate();
             }

            if($A.util.isUndefinedOrNull(className)){
 				className='';
            }
			
			if (!$A.util.isUndefinedOrNull(element.auraClass)) {
				className += (" " + element.auraClass);
			}
			
			if (element["className"] !== className) {
				element["className"] = className;
			}
		}
		
		if (element.tagName ==="A" && !element.getAttribute("href")) {
			element.setAttribute("href", "javascript:void(0);");
		}

		if (helper.canHaveBody(component)) {
            $A.renderingService.rerenderFacet(component,component.get("v.body"),element);
		}
	},
                      "unrender":
function(component, helper) {
		
		$A.renderingService.unrenderFacet(component, component.get("v.body"));
	}
                    }
                  },
                  "helperDef":{
                    "serId":7,
                    "value":{
                      "descriptor":"js://aura.html",
                      "functions":{
                        "addNamedClickHandler":
function(element, handler, handlerName) {
        var previousHandler = element[handlerName];
        if ($A.util.isFunction(previousHandler)) {
            $A.util.removeOn(element, "click", previousHandler);
        }

        $A.util.on(element, "click", handler);

        element[handlerName] = handler;
        return previousHandler;
    },
                        "BODYLESS_TAGS":{
                          "hr":true,
                          "col":true,
                          "keygen":true,
                          "param":true,
                          "link":true,
                          "track":true,
                          "img":true,
                          "br":true,
                          "embed":true,
                          "meta":true,
                          "input":true,
                          "area":true,
                          "source":true,
                          "base":true,
                          "command":true,
                          "wbr":true
                        },
                        "caseAttribute":
function(attribute) {
        return this.SPECIAL_CASINGS[attribute] || attribute;
    },
                        "createHtmlAttribute":
function(component, element, name, attribute) {
        var value;
        var lowerName = name.toLowerCase();

        
        if (lowerName.indexOf("on") === 0) {
            var eventName = lowerName.substring(2);
            if (eventName === "click") {
                this.addNamedClickHandler(element, this.domEventHandler, this.NAMES.domHandler);
            } else {
                $A.util.on(element, eventName, this.domEventHandler);
            }
        } else {
            var isSpecialBoolean = this.SPECIAL_BOOLEANS.hasOwnProperty(lowerName);
            if (aura.util.isExpression(attribute)) {
                attribute.addChangeHandler(component, "HTMLAttributes." + name);
                value = attribute.evaluate();
            } else {
                value = attribute;
            }

            if (isSpecialBoolean) {
                value = $A.util.getBooleanValue(value);
            }

            var isString = $A.util.isString(value);
            if (isString && value.indexOf("/auraFW") === 0) {
                
                value = $A.getContext().getContextPath() + value;
            }

            var isHash = isString && value.indexOf("#") === 0;
            if (lowerName === "href" && element.tagName === "A" && value && (isHash || $A.util.supportsTouchEvents())) {
                var HTMLAttributes = component.get("v.HTMLAttributes");
                var target = HTMLAttributes["target"];
                if (aura.util.isExpression(target)) {
                    target = target.evaluate();
                }
                this.addNamedClickHandler(element, function () {
                    if (isHash) {
                        $A.run(function () {
                            $A.historyService.set(value.substring(1));
                        })
                    } else {
                        
                        
                        window.open(value, target ? target : "_self");
                    }
                }, this.NAMES.hashHandler);

                var href = "javascript:void(0";
                if ($A.getContext().getMode() !== "PROD") {
                    
                    
                    href += "/*" + value + "\u002A/";
                }
                href += ");";
                element.setAttribute("href", href);
            } else if (lowerName === "role" || lowerName.lastIndexOf("aria-", 0) === 0) {
                
                element.setAttribute(name, value);
            } else if (isSpecialBoolean) {
                
                var casedName = this.caseAttribute(lowerName);
                if (value === false) {
                    element.removeAttribute(casedName);
                    
                    
                    if (casedName === "checked") {
                        element.removeAttribute("defaultChecked");
                    }
                } else {
                    element.setAttribute(casedName, name);

                    
                    if (casedName === "checked") {
                        element.setAttribute("defaultChecked", true);
                    }
                }
                
                
                
                if($A.util.isUndefinedOrNull(value)){
                    value='';
                }
                element[casedName] = value;
            } else {

                
                
                
                
                
                if ($A.util.isIE && element.tagName === "INPUT" && lowerName === "type") {
                    try { element.setAttribute("type", value); }
                    catch(e){}
                }
                
                
                
                
                else if (!aura.util.isUndefined(value) && !($A.util.isIE && element.tagName === "INPUT" && lowerName === "value" && value === null)) {
                    var casedAttribute = this.caseAttribute(lowerName);
                    var lowerName = name.toLowerCase();
                    if (lowerName === "style" && $A.util.isIE) {
                        element.style.cssText = value;
                    } else if (lowerName === "type" || lowerName === "href" || lowerName === "style" || lowerName.indexOf("data-") === 0) {
                        
                        element.setAttribute(casedAttribute, value);
                    } else {
                        if ($A.util.isUndefinedOrNull(value)) {
                            value = '';
                        }
                        element[casedAttribute] = value;
                    }
                }
            }
        }
    },
                        "SPECIAL_CASINGS":{
                          "frameborder":"frameBorder",
                          "maxlength":"maxLength",
                          "colspan":"colSpan",
                          "usemap":"useMap",
                          "for":"htmlFor",
                          "tabindex":"tabIndex",
                          "class":"className",
                          "rowspan":"rowSpan",
                          "readonly":"readOnly",
                          "accesskey":"accessKey",
                          "bgcolor":"bgColor"
                        },
                        "SPECIAL_BOOLEANS":{
                          "autocomplete":true,
                          "noresize":true,
                          "noshade":true,
                          "declare":true,
                          "defer":true,
                          "selected":true,
                          "ismap":true,
                          "compact":true,
                          "nowrap":true,
                          "required":true,
                          "checked":true,
                          "readonly":true,
                          "multiple":true,
                          "disabled":true
                        },
                        "canHaveBody":
function(component) {
        var tag = component.get("v.tag");
        if ($A.util.isUndefinedOrNull(tag)) {
            $A.error("Undefined tag attribute for " + component.getGlobalId());
            return true;
        }
        return !this.BODYLESS_TAGS[tag.toLowerCase()];
    },
                        "domEventHandler":
function(event) {
        var eventName = "on" + event.type,
            element = event.currentTarget,
            ownerComponent = $A.componentService.getRenderingComponentForElement(element),
            htmlAttributes = ownerComponent.get("v.HTMLAttributes"),
            valueExpression = htmlAttributes[eventName],
            onclickExpression;

        if (eventName === 'ontouchend' || eventName === 'onpointerup' || eventName === 'onMSPointerUp') {
            
            onclickExpression = htmlAttributes["onclick"];
            if (!$A.util.isEmpty(onclickExpression)) {
                if ($A.util.isEmpty(valueExpression)) {
                    
                    valueExpression = onclickExpression;
                }
            }
        }

        if ($A.util.isExpression(valueExpression)) {
            $A.run(function () {
                var action = valueExpression.evaluate();
                action.runDeprecated(event);
            });
        }
    },
                        "NAMES":{
                          "domHandler":"fcDomHandler",
                          "hashHandler":"fcHashHandler"
                        }
                      }
                    }
                  },
                  "attributeDefs":[
                    {
                      "serId":8,
                      "value":{
                        "name":"body",
                        "type":"aura://Aura.Component[]"
                      }
                    },
                    {
                      "serId":9,
                      "value":{
                        "name":"tag",
                        "type":"aura://String"
                      }
                    },
                    {
                      "serId":10,
                      "value":{
                        "name":"HTMLAttributes",
                        "type":"aura://Map"
                      }
                    }
                  ],
                  "interfaces":[
                    "markup://aura:rootComponent"
                  ]
                }
              },
              "flavorable":true,
              "attributes":{
                "values":{
                  "body":{
                    "descriptor":"body",
                    "value":[
                      {
                        "componentDef":{
                          "serId":11,
                          "value":{
                            "descriptor":"markup://aura:text",
                            "rendererDef":{
                              "serId":12,
                              "value":{
                                "descriptor":"js://aura.text",
                                "render":
function(component) {
        var value = component.get("v.value");
        
        var trunc = component.get("v.truncate");
        var truncateByWord = $A.util.getBooleanValue(component.get("v.truncateByWord"));
        var ellipsis = $A.util.getBooleanValue(component.get("v.ellipsis"));
        
        if(trunc){
            trunc = 1 * trunc;
            value = aura.util.truncate(value, trunc, ellipsis, truncateByWord);
        }
        return [document.createTextNode($A.util.isUndefinedOrNull(value)?'':value)];
    },
                                "rerender":
function(component) {
        var element=component.getElement();
        
        if (element && element.parentNode) {
        	var textValue = component.get("v.value");
            textValue = $A.util.isUndefinedOrNull(textValue) ? '' : textValue;
            
            if (element.nodeValue !== textValue) {
                element.nodeValue = textValue;
            }
        }
    }
                              }
                            },
                            "attributeDefs":[
                              {
                                "serId":13,
                                "value":{
                                  "name":"value",
                                  "type":"aura://String"
                                }
                              },
                              {
                                "serId":14,
                                "value":{
                                  "name":"truncate",
                                  "type":"aura://Integer"
                                }
                              },
                              {
                                "serId":15,
                                "value":{
                                  "name":"truncateByWord",
                                  "type":"aura://Boolean",
                                  "default":false
                                }
                              },
                              {
                                "serId":16,
                                "value":{
                                  "name":"ellipsis",
                                  "type":"aura://Boolean",
                                  "default":true
                                }
                              }
                            ],
                            "interfaces":[
                              "markup://aura:rootComponent"
                            ]
                          }
                        },
                        "attributes":{
                          "values":{
                            "value":{
                              "descriptor":"value",
                              "value":"flavorableFakeComponent"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "HTMLAttributes":{
                    "descriptor":"HTMLAttributes",
                    "value":{

                    }
                  },
                  "tag":{
                    "descriptor":"tag",
                    "value":"div"
                  }
                }
              }
            }
          ]
        }
      ]
    }
  },
  "flavorName":"test"
}